{
  "basePath": "/labs/proxy/qkr2/internal/api2",
  "paths": {
    "/orderAheadMenu/orderAhead": {
      "get": {
        "summary": "Lists Order Ahead menus",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"orderTime\":\"1000\",\"siteName\":\"AU.m1.o1\",\"menuTypes\":\"Collection\",\"merchantName\":\"AU.m1\"}"
            },
            "ordering": 960,
            "response": {
              "application/json": "{\"list\":[{\"menuType\":\"Collection\",\"categories\":[]}]}"
            },
            "name": "Test__order_ahead_menu_order_ahead_get",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Get OrderAhead menu",
        "operationId": "orderAheadMenu.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPosMenusResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "orderAhead",
        "parameters": [
          {
            "in": "query",
            "format": "",
            "name": "menuTypes",
            "description": "Menu Type (comma separated list from OrderAtTable, Collection, Delivery)",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "merchantName",
            "description": "Merchant name",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "int64",
            "name": "orderTime",
            "description": "Order Time (millis since epoch)",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "siteName",
            "description": "Site name",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "orderAheadMenu"
        ]
      }
    },
    "/merchant": {
      "get": {
        "summary": "Lists merchants",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].defaultCurrency",
              "list[0].imageUrl",
              "list[0].name",
              "list[0].outlets[0].payAtTable",
              "list[0].outlets[0].address",
              "list[0].outlets[0].latitude",
              "list[0].outlets[0].merchantId",
              "list[0].outlets[0].imageUrl",
              "list[0].outlets[0].name",
              "list[0].outlets[0].id",
              "list[0].outlets[0].longitude",
              "list[0].outlets[0].prodGroupSummaries[0].name",
              "list[0].outlets[0].prodGroupSummaries[0].id",
              "list[0].outlets[0].prodGroupSummaries[0].totalCount",
              "list[0].id",
              "list[0].category"
            ],
            "request": {
              "application/json": "{}"
            },
            "ordering": 111,
            "response": {
              "application/json": "{\"list\":[{\"twitter\":null,\"website\":null,\"defaultCurrency\":\"USD\",\"imageUrl\":\"\",\"icon\":null,\"taxCalculationsEnabled\":false,\"name\":\"OpenApi sdk-gen test\",\"outlets\":[{\"payAtTable\":false,\"address\":\"lalal, some city, Alabama\",\"closedReason\":null,\"latitude\":1.0,\"posType\":null,\"isOpen\":true,\"phone\":null,\"merchantId\":\"143035\",\"imageUrl\":\"\",\"name\":\"lalal\",\"iconUrl\":null,\"id\":\"143042\",\"longitude\":1.0,\"prodGroupSummaries\":[{\"name\":\"my menu\",\"id\":\"143051\",\"totalCount\":1}]}],\"id\":\"143035\",\"category\":\"Cafe\",\"pricesSetPretax\":false}]}"
            },
            "name": "getMerchant"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists merchants belonging to the calling partner",
        "operationId": "merchant.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetMerchantsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "query",
            "format": "",
            "name": "latitude",
            "description": "Latitude coordinate of the required merchants.  If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "format": "",
            "name": "longitude",
            "description": "Longitude coordinate of the required merchants.  If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "format": "",
            "name": "queryString",
            "description": "Filter outlet by checking if merchant and outlet's name contains the queryString .  If no queryString is supplied, all merchants configured for the calling partner will be returned",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "merchant"
        ]
      }
    },
    "/order/pat": {
      "post": {
        "summary": "Create an order",
        "x-samples": [
          {
            "ignoreAsserts": [
              "shortReference",
              "orderId"
            ],
            "request": {
              "application/json": "{\"tableIdentifier\":\"@remember-integer[4]@\",\"siteName\":\"AU.m1.o1\",\"merchantName\":\"AU.m1\"}"
            },
            "ordering": 105,
            "response": {
              "application/json": "{\"shortReference\":\"7881\",\"orderId\":\"7881\",\"message\":\"Newly created order\"}"
            },
            "name": "Test__order_pat_post",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates a new order on the POS for Pay at Table",
        "operationId": "order.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreatePatOrderResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiPatOrderCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "order"
        ]
      }
    },
    "/card/{id}": {
      "get": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from-AddCard\"}"
            },
            "ordering": 120,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__card_get_id",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "addCard.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "card.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CardResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "card"
        ]
      },
      "delete": {
        "summary": "Delete a payment card",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from.add\"}"
            },
            "ordering": 132,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__card__id__delete",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "addCard.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Deletes a payment card",
        "operationId": "card.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the card to delete",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "card"
        ]
      },
      "put": {
        "summary": "Update a payment card",
        "x-samples": [
          {
            "ignoreAsserts": [
              "cardId"
            ],
            "request": {
              "application/json": "{\"expMonth\":\"11\",\"cvc\":\"123\",\"isDefault\":true,\"addressZip\":\"90210\",\"expYear\":\"25\",\"X-Auth-Token\":\"from-login\",\"name\":\"John CardHolder\",\"alias\":\"some alias\",\"id\":\"from.add\",\"pan\":\"5555555555554444\"}"
            },
            "ordering": 113,
            "response": {
              "application/json": "{\"isDefault\":true,\"cardId\":\"822831a0-7eb0-4242-bb33-7515a823a717\"}"
            },
            "name": "Test__card__id__put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "addCard.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Updates a payment card",
        "operationId": "card.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateCardResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the card to update",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/UpdateCardCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "card"
        ]
      }
    },
    "/cart": {
      "get": {
        "summary": "Lists carts",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].amountMinorUnits",
              "list[0].cartId",
              "list[0].cartItems[0].id",
              "list[0].cartItems[0].productGroupId",
              "list[0].cartItems[0].productId",
              "list[0].cartItems[0].productVariantId",
              "list[0].cartItems[0].scanId",
              "list[0].cartItems[0].variant.id",
              "list[0].cartItems[0].variant.sku",
              "list[0].cartItems[0].variant.isDefault",
              "list[0].locatedScanId",
              "list[0].merchantId",
              "list[0].merchantLocId",
              "list[0].scanId",
              "list[0].timeZone",
              "list[0].basicCost",
              "list[0].merchantName",
              "list[0].merchantLocation",
              "list[0].currency",
              "list[0].cartItems[0].amountMinorUnits",
              "list[0].cartItems[0].subTotal",
              "list[0].cartItems[0].productName",
              "list[0].cartItems[0].totalAmount",
              "list[0].cartItems[0].imageUrl",
              "list[0].cartItems[0].variant.amountMinorUnits",
              "list[0].cartItems[0].currency",
              "list[0].merchantWideImageUrl"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 134,
            "response": {
              "application/json": "{\"list\":[{\"cartTotalTax\":0,\"merchantIconUrl\":null,\"scanId\":\"MERCHANT143035_LOC143043_PRODUCTGROUP143051\",\"cartId\":\"152781\",\"timeZone\":\"US/Hawaii\",\"amountMinorUnits\":200,\"basicCost\":200,\"merchantLocId\":\"143043\",\"seatRequired\":true,\"taxName\":\"Tax\",\"merchantName\":\"OpenApi sdk-gen test\",\"merchantLocation\":\"lalal\",\"merchantId\":\"143035\",\"locatedScanId\":\"143052\",\"taxCalculationsEnabled\":false,\"cartType\":\"ACTIVE\",\"currency\":\"USD\",\"cartItems\":[{\"purchaseNote\":null,\"quantity\":1,\"productVariantId\":\"143054\",\"productId\":\"143053\",\"scanId\":\"MERCHANT143035_LOC143043_PRODUCTGROUP143051\",\"productGroupId\":\"143051\",\"taxBreakDown\":[{\"amount\":0,\"name\":\"NoTax\",\"percent\":\"0.000000\"}],\"amountMinorUnits\":200,\"deliveryDateStr\":null,\"subTotal\":200,\"taxName\":\"Global 0% (No known tax rate)\",\"productName\":\"tea\",\"totalAmount\":200,\"imageUrl\":\"https://d1wfs5jdtdt7am.cloudfront.net/mss/product-placeholder.png\",\"variant\":{\"isDefault\":true,\"gtin\":null,\"ean\":null,\"variantDetails\":[],\"amountMinorUnits\":200,\"upc\":null,\"currency\":\"AUD\",\"id\":\"143054\",\"priority\":0,\"sku\":\"ba01dafe-efbf-4d4b-af34-10d06497351d\",\"stockLevel\":null},\"paid\":false,\"options\":[],\"currency\":\"USD\",\"id\":\"152782\",\"taxAmount\":0,\"deliveryDate\":null,\"user\":{\"lastName\":null,\"firstName\":null,\"extUserId\":null,\"userName\":null,\"userId\":null},\"productDescription\":null}],\"shippingAddressRequired\":false,\"unitPricePreTax\":false,\"merchantWideImageUrl\":\"\"}]}"
            },
            "name": "Test__cart_get",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists carts belonging to the user on the request",
        "operationId": "cart.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetCartsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cart"
        ]
      }
    },
    "/trans": {
      "post": {
        "summary": "Creates a trans",
        "x-samples": [
          {
            "ignoreAsserts": [
              "bin",
              "gatewayRef",
              "id",
              "ref"
            ],
            "request": {
              "application/json": "{\"cardId\":\"from-addCard\",\"outletId\":\"from-getMerchant\",\"X-Auth-Token\":\"from-login\",\"amountMinorUnits\":3599}"
            },
            "ordering": 112,
            "response": {
              "application/json": "{\"ref\":\"4145-184-310\",\"transShortCode\":\"\",\"bin\":\"\",\"gatewayRef\":\"dummyRef1495723146713\",\"thankYouMessage\":\"Thank you for your purchase\",\"id\":\"152776\"}"
            },
            "name": "createTrans",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "cardId": "addCard.id"
              },
              {
                "outletId": "getMerchant.list[0].outlets[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Handles the checkout of the supplied cart using the supplied card",
        "operationId": "trans.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateTransResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/PurchaseCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "trans"
        ]
      },
      "get": {
        "summary": "Lists trans",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].merchantId",
              "list[0].merchantLocId",
              "list[0].timestamp",
              "list[0].totalAmount.amountMinorUnits",
              "list[0].transactionId",
              "list[0].merchantLocName",
              "list[0].tipAmount.currency",
              "list[0].merchantIconUrl",
              "list[0].merchantName",
              "list[0].totalAmount.currency",
              "list[0].cardAlias",
              "list[0].taxAmount.currency"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"from\":0,\"to\":20}"
            },
            "ordering": 116,
            "response": {
              "application/json": "{\"hasMore\":false,\"list\":[{\"collectionTime\":null,\"merchantLocName\":\"lalal\",\"tipAmount\":{\"amountMinorUnits\":0,\"currency\":\"USD\"},\"merchantIconUrl\":\"\",\"pending\":false,\"merchantLocId\":\"143042\",\"transactionId\":\"152776\",\"taxName\":\"\",\"merchantName\":\"OpenApi sdk-gen test\",\"receiptName\":\"\",\"taxRate\":0.0,\"totalAmount\":{\"amountMinorUnits\":3599,\"currency\":\"USD\"},\"merchantId\":\"143035\",\"receiptFooter\":\"\",\"cardAlias\":\"my card\",\"taxAmount\":{\"amountMinorUnits\":0,\"currency\":\"USD\"},\"receiptHeader\":\"Receipt\",\"timestamp\":1495723136496}]}"
            },
            "name": "Test__trans_get",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists transaction summaries belonging to the user on the request",
        "operationId": "trans.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTransactionsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "default": "0",
            "in": "query",
            "format": "int32",
            "name": "from",
            "description": "The starting point for the transaction search",
            "type": "integer",
            "minimum": 0,
            "required": true
          },
          {
            "default": "20",
            "in": "query",
            "format": "int32",
            "name": "to",
            "description": "The number of transactions to return",
            "type": "integer",
            "minimum": 0,
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "trans"
        ]
      }
    },
    "/lightbox": {
      "post": {
        "summary": "Generates a URL to the Lightbox",
        "x-samples": [
          {
            "ignoreAsserts": [
              "id",
              "url"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"action\":\"SELECT_CARD\",\"callbackUrl\":\"lalal\",\"countryOfResidence\":\"US\"}"
            },
            "ordering": 118,
            "response": {
              "application/json": "{\"id\":\"152779\",\"url\":\"https://sandbox.qkr.mastercard.com/lightbox2?id=eyJhbGciOiJIUzI1NiJ9.eyJMQl9WQUxJREFURV9DQVJEIjoiZmFsc2UiLCJMQl9DQUxMQkFDS19VUkwiOiJsYWxhbCIsImlzcyI6IlFLUiIsIkxCX1RSQUNFIjoiQTAwYmQwLmpjbDJkYWw0NFwvMTUyNzY4IiwiTEJfU0hBUkVEX1NFQ1JFVCI6IkhKZmc5MTYtR0dxIiwiTEJfQ09VTlRSWV9PRl9SRVNJREVOQ0UiOiJVUyIsIkxCX0xBTkdVQUdFIjoiZW4iLCJleHAiOjE0OTU3MjQ5NTk1NTQsIkxCX0FDQ0VTU19UT0tFTiI6Im90a19ORFF4TjJFMlpUQXROakprWXkwME0yWmpMV0UxTUdJdE5ETXlZemRrWXpRek5qTTAiLCJMQl9EQVRBX0lEIjoiMTUyNzc5IiwiTEJfREVGQVVMVF9TVEFURSI6IlwvY2FyZFwvbGlzdCIsIkxCX1BBWU1FTlRfT05MWSI6ImZhbHNlIiwiTEJfQUNUSU9OIjoiU0VMRUNUX0NBUkQiLCJMQl9QVUJMSUNfS0VZIjoic2JwYl9Zall5TkRnNU9EY3RPR0V4TXkwME9XTTBMV0ZtT1RjdFpqaGpaRE5tTlRsak5HTmwifQ.ZoNNdb4eWWLbMPaW6HWu_EratdntJzQ6TdSf8TKoCbo\"}"
            },
            "name": "Test__lightbox_post",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Generates the Lightbox URL.  This will include an ID param that is used (by our servers) to validate that the URL was launched by a known Partner.  Example: https://qkr.mastercard.com/lightbox?id=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0NTQ5MzUzNTA5MjksImlzcyI6IlFLUiJ9.wK1p9Qts_XccUcpvYWl0D8wYLTRjNNYZ283nKcZoaDE",
        "operationId": "lightbox.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateLightboxResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiLightboxCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "lightbox"
        ]
      }
    },
    "/menu/pat": {
      "get": {
        "summary": "Lists menus",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"siteName\":\"AU.m1.o1\",\"menuTypes\":\"OrderAtTable\",\"merchantName\":\"AU.m1\"}"
            },
            "ordering": 956,
            "response": {
              "application/json": "{\"list\":[{\"menuType\":\"OrderAtTable\",\"categories\":[]}]}"
            },
            "name": "Test__menu_pat_get",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists menus belonging to the merchant and site on the request",
        "operationId": "menu.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPosMenusResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "in": "query",
            "format": "",
            "name": "menuTypes",
            "description": "Types of menus to retrieve, comma separated. Valid values: OrderAtTable",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "merchantName",
            "description": "Name of the merchant who owns the site",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "siteName",
            "description": "Name of the site whose menu is retrieved",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "menu"
        ]
      }
    },
    "/lightbox/{id}": {
      "get": {
        "summary": "Retrieve the list of Lightbox callbacks that happened at a particular Lightbox URL.",
        "x-samples": [
          {
            "ignoreAsserts": [
              "id",
              "url"
            ],
            "request": {
              "application/json": "{\"id\":\"from-getProfile\"}"
            },
            "ordering": 126,
            "response": {
              "application/json": "{\"list\":[]}"
            },
            "name": "Test__lightbox__id__get",
            "overrides": [
              {
                "id": "Test__lightbox_post.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "lightbox.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLightboxResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "The corresponding ID returned in the request that created the initial Lightbox URL.",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "lightbox"
        ]
      }
    },
    "/machine/{id}": {
      "get": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"id\":\"3Q0qoPPYkg\"}"
            },
            "ordering": 933,
            "response": {
              "application/json": "{\"hasExpressCheckoutPermission\":true,\"merchantId\":\"10019\",\"currency\":\"SGD\",\"model\":\"Auresys\",\"merchantCountry\":\"SG\"}"
            },
            "name": "getMachine",
            "overrides": [

            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "machine.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ApiMachineDetailsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "machine"
        ]
      }
    },
    "/vendingSession": {
      "post": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [
              "id",
              "sessionRefId"
            ],
            "request": {
              "application/json": "{\"machineId\":\"3Q0qoPPYkg\",\"X-Auth-Token\":\"from-login\",\"cardId\":\"from-addCard\"}"
            },
            "ordering": 934,
            "response": {
              "application/json": "{\"sessionRefId\":\"vendingSession_sessionRefId_123\",\"payload\":null,\"sessionStatus\":\"Engaged\",\"id\":\"vendingSession_123\"}"
            },
            "name": "createVendingSession",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "cardId": "addCard.id"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "vendingSession.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ApiVendingSessionResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiVendingSessionCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "vendingSession"
        ]
      }
    },
    "/auth/payment": {
      "post": {
        "summary": "Creates an authorization against a payment card",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"amount\":1000,\"outletId\":\"from.getMerchant\",\"cardId\":\"from.addCard\",\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 136,
            "response": {
              "application/json": "{}"
            },
            "name": "createAuthPayment",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "outletId": "getMerchant.list[0].outlets[0].id"
              },
              {
                "cardId": "addCard.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates an authorization against a payment card for the specified amount.  This method returns an authCode that must be used when doing the capture of the payment on the card.",
        "operationId": "auth.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PaymentAuthResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "payment",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiPaymentAuthCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/securityQuestion": {
      "get": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].text",
              "list[1].text",
              "list[2].text",
              "list[3].text",
              "list[4].text",
              "list[5].text",
              "list[6].text",
              "list[7].text",
              "list[8].text",
              "list[9].text",
              "list[10].text",
              "list[11].text",
              "list[12].text",
              "list[13].text",
              "list[14].text",
              "list[15].text",
              "list[16].text",
              "list[17].text"
            ],
            "request": {
              "application/json": "{}"
            },
            "ordering": 101,
            "response": {
              "application/json": "{\"list\":[{\"text\":\"In what town or city was your mother born?\"},{\"text\":\"What was your grandfather's occupation?\"},{\"text\":\"What is your eldest sibling's middle name?\"},{\"text\":\"What is your eldest cousin's first and last name?\"},{\"text\":\"In what city or town did your mother and father meet?\"},{\"text\":\"What was the last name of your third grade teacher?\"},{\"text\":\"What was your childhood nickname?\"},{\"text\":\"In what city did you meet your spouse/significant other?\"},{\"text\":\"What is the name of your favorite childhood friend?\"},{\"text\":\"What is the street name of the house you grew up in?\"},{\"text\":\"What was your favorite place to visit as a child?\"},{\"text\":\"What time of the day were you born?\"},{\"text\":\"What was the first concert you attended?\"},{\"text\":\"What is your mother's middle name?\"},{\"text\":\"In what city or town do you want to retire?\"},{\"text\":\"What is the name of your grandmother's dog?\"},{\"text\":\"In which hospital was your oldest child born?\"},{\"text\":\"What is your maternal grandmother's maiden name?\"}]}"
            },
            "name": "securityQuestion"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "securityQuestion.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetSecurityQuestionsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [

        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "securityQuestion"
        ]
      }
    },
    "/orderCalendar/{id}": {
      "get": {
        "summary": "Fetch the order details for a menu for current week and next week or a time frame if given",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":12345}"
            },
            "ordering": 148,
            "response": {
              "application/json": "{\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].cartItems[0].quantity\":1,\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].transItems[0].id\":123456,\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].beneficiaryId\":123456,\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].transItems[0].transId\":123456,\"merchantId\":5697,\"merchantTimezone\":\"Australia/Adelaide\",\"orderCalendarDays[0].locked\":true,\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].cartItems[0].id\":123456,\"orderCalendarDays[0].date\":1525789800000,\"orderCalendarDays[0].orderCalendarDayBeneficiaries[0].transItems[0].quantity\":1,\"merchantLocId\":5722}"
            },
            "name": "getOrderCalendar",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Fetch the order details for a menu for current week and next week or a time frame if given. This excludes Saturday and Sunday.",
        "operationId": "orderCalendar.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetOrderCalendarResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the resource",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "format": "int64",
            "name": "endTime",
            "description": "End time for fetching the order calendar",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "format": "",
            "name": "id",
            "description": "ID of the product group for which order calendar is required",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "int64",
            "name": "startTime",
            "description": "Start time for fetching the order calendar",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "orderCalendar"
        ]
      }
    },
    "/cart/{id}": {
      "get": {
        "summary": "Finds a cart",
        "x-samples": [
          {
            "ignoreAsserts": [
              "scanId",
              "timeZone",
              "amountMinorUnits",
              "merchantLocId",
              "merchantName",
              "merchantLocation",
              "merchantId",
              "locatedScanId",
              "currency",
              "cartItems[0].amountMinorUnits",
              "cartItems[0].subTotal",
              "cartItems[0].productName",
              "cartItems[0].totalAmount",
              "cartItems[0].imageUrl",
              "cartItems[0].variant.amountMinorUnits",
              "cartItems[0].variant.id",
              "cartItems[0].variant.sku",
              "cartItems[0].currency",
              "cartItems[0].variant.isDefault",
              "merchantWideImageUrl",
              "basicCost",
              "cartId",
              "cartItems[0].id",
              "cartItems[0].productGroupId",
              "cartItems[0].productId",
              "cartItems[0].productVariantId",
              "cartItems[0].scanId"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"fromGetCarts\"}"
            },
            "ordering": 135,
            "response": {
              "application/json": "{\"cartTotalTax\":0,\"merchantIconUrl\":null,\"scanId\":\"MERCHANT143035_LOC143043_PRODUCTGROUP143051\",\"cartId\":\"152781\",\"timeZone\":\"US/Hawaii\",\"amountMinorUnits\":200,\"basicCost\":200,\"merchantLocId\":\"143043\",\"seatRequired\":true,\"taxName\":\"Tax\",\"merchantName\":\"OpenApi sdk-gen test\",\"merchantLocation\":\"lalal\",\"merchantId\":\"143035\",\"locatedScanId\":\"143052\",\"taxCalculationsEnabled\":false,\"cartType\":\"ACTIVE\",\"currency\":\"USD\",\"cartItems\":[{\"purchaseNote\":null,\"quantity\":1,\"productVariantId\":\"143054\",\"productId\":\"143053\",\"scanId\":\"MERCHANT143035_LOC143043_PRODUCTGROUP143051\",\"productGroupId\":\"143051\",\"taxBreakDown\":[{\"amount\":0,\"name\":\"NoTax\",\"percent\":\"0.000000\"}],\"amountMinorUnits\":200,\"deliveryDateStr\":null,\"subTotal\":200,\"taxName\":\"Global 0% (No known tax rate)\",\"productName\":\"tea\",\"totalAmount\":200,\"imageUrl\":\"https://d1wfs5jdtdt7am.cloudfront.net/mss/product-placeholder.png\",\"variant\":{\"isDefault\":true,\"gtin\":null,\"ean\":null,\"variantDetails\":[],\"amountMinorUnits\":200,\"upc\":null,\"currency\":\"AUD\",\"id\":\"143054\",\"priority\":0,\"sku\":\"ba01dafe-efbf-4d4b-af34-10d06497351d\",\"stockLevel\":null},\"paid\":false,\"options\":[],\"currency\":\"USD\",\"id\":\"152782\",\"taxAmount\":0,\"deliveryDate\":null,\"user\":{\"lastName\":null,\"firstName\":null,\"extUserId\":null,\"userName\":null,\"userId\":null},\"productDescription\":null}],\"shippingAddressRequired\":false,\"unitPricePreTax\":false,\"merchantWideImageUrl\":\"\"}"
            },
            "name": "Test__cart__id__get",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "Test__cartItem_post.cartId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Finds the cart for the ID required (provided it is belonged to the user on the request)",
        "operationId": "cart.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CartResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the cart to retrieve",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cart"
        ]
      },
      "delete": {
        "summary": "Delete a cart",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from cartItem post forDelete\"}"
            },
            "ordering": 932,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__cart__id__delete",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "Test__cartItem_post_forDelete.cartId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Delete the cart for the ID required (provided it is belonged to the user on the request)",
        "operationId": "cart.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the cart to delete",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cart"
        ]
      }
    },
    "/auth/payment/{id}": {
      "delete": {
        "summary": "Deletes/cancels a previous auth identified by the supplied ID",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from.createAuthPayment\"}"
            },
            "ordering": 137,
            "response": {
              "application/json": "{}"
            },
            "name": "deleteAuthPayment",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createAuthPayment.authId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Deletes/cancels a previous auth identified by the supplied ID",
        "operationId": "auth.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": "payment",
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the auth to delete/cancel",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/creditNote": {
      "post": {
        "summary": "Cancels a list of selected transactions",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"transItemIds\":[\"1234\"]}"
            },
            "ordering": 146,
            "response": {
              "application/json": "{}"
            },
            "name": "createCreditNote",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Create credit notes for a user by cancelling a transaction made by said user.",
        "operationId": "creditNote.create",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateCreditNoteAmountCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "creditNote"
        ]
      }
    },
    "/externalTrans": {
      "post": {
        "summary": "Notify Qkr of a payment that was completed outside of Qkr",
        "x-samples": [
          {
            "ignoreAsserts": [
              "qkrRef"
            ],
            "request": {
              "application/json": "{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"outletName\":\"AU.m1.o1\",\"totalAmount\":\"100\",\"ref\":\"test\",\"transType\":\"test\",\"merchantId\":\"string\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"}"
            },
            "ordering": 964,
            "response": {
              "application/json": "{\"qkrRef\":\"3278-875-530\"}"
            },
            "name": "Test__external_trans_post",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Qkr will respond with a reference which can be used to subsequently retrieve the transaction information",
        "operationId": "externalTrans.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ExternalTransCreateResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ExternalTransCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "externalTrans"
        ]
      },
      "get": {
        "summary": "Get all payments where Qkr was not used to pay",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].authCode",
              "list[0].paymentDate",
              "list[0].qkrRef",
              "list[0].subTotalAmount",
              "list[0].discountAmount",
              "list[0].currency",
              "list[0].paymentProcessorRef",
              "list[0].ref",
              "list[0].transType",
              "list[0].outletId",
              "list[0].totalAmount",
              "list[0].merchantName",
              "list[0].dateCreated",
              "list[0].outletName",
              "list[0].merchantId",
              "list[0].paymentProcessorName",
              "list[1].authCode",
              "list[1].paymentDate",
              "list[1].qkrRef",
              "list[1].subTotalAmount",
              "list[1].discountAmount",
              "list[1].currency",
              "list[1].paymentProcessorRef",
              "list[1].ref",
              "list[1].transType",
              "list[1].outletId",
              "list[1].totalAmount",
              "list[1].merchantName",
              "list[1].dateCreated",
              "list[1].outletName",
              "list[1].merchantId",
              "list[1].paymentProcessorName",
              "list[2].authCode",
              "list[2].paymentDate",
              "list[2].qkrRef",
              "list[2].subTotalAmount",
              "list[2].discountAmount",
              "list[2].currency",
              "list[2].paymentProcessorRef",
              "list[2].ref",
              "list[2].transType",
              "list[2].outletId",
              "list[2].totalAmount",
              "list[2].merchantName",
              "list[2].dateCreated",
              "list[2].outletName",
              "list[2].merchantId",
              "list[2].paymentProcessorName",
              "list[3].authCode",
              "list[3].paymentDate",
              "list[3].qkrRef",
              "list[3].subTotalAmount",
              "list[3].discountAmount",
              "list[3].currency",
              "list[3].paymentProcessorRef",
              "list[3].ref",
              "list[3].transType",
              "list[3].outletId",
              "list[3].totalAmount",
              "list[3].merchantName",
              "list[3].dateCreated",
              "list[3].outletName",
              "list[3].merchantId",
              "list[3].paymentProcessorName",
              "list[4].authCode",
              "list[4].paymentDate",
              "list[4].qkrRef",
              "list[4].subTotalAmount",
              "list[4].discountAmount",
              "list[4].currency",
              "list[4].paymentProcessorRef",
              "list[4].ref",
              "list[4].transType",
              "list[4].outletId",
              "list[4].totalAmount",
              "list[4].merchantName",
              "list[4].dateCreated",
              "list[4].outletName",
              "list[4].merchantId",
              "list[4].paymentProcessorName",
              "list[5].authCode",
              "list[5].paymentDate",
              "list[5].qkrRef",
              "list[5].subTotalAmount",
              "list[5].discountAmount",
              "list[5].currency",
              "list[5].paymentProcessorRef",
              "list[5].ref",
              "list[5].transType",
              "list[5].outletId",
              "list[5].totalAmount",
              "list[5].merchantName",
              "list[5].dateCreated",
              "list[5].outletName",
              "list[5].merchantId",
              "list[5].paymentProcessorName",
              "list[6].authCode",
              "list[6].paymentDate",
              "list[6].qkrRef",
              "list[6].subTotalAmount",
              "list[6].discountAmount",
              "list[6].currency",
              "list[6].paymentProcessorRef",
              "list[6].ref",
              "list[6].transType",
              "list[6].outletId",
              "list[6].totalAmount",
              "list[6].merchantName",
              "list[6].dateCreated",
              "list[6].outletName",
              "list[6].merchantId",
              "list[6].paymentProcessorName",
              "list[7].authCode",
              "list[7].paymentDate",
              "list[7].qkrRef",
              "list[7].subTotalAmount",
              "list[7].discountAmount",
              "list[7].currency",
              "list[7].paymentProcessorRef",
              "list[7].ref",
              "list[7].transType",
              "list[7].outletId",
              "list[7].totalAmount",
              "list[7].merchantName",
              "list[7].dateCreated",
              "list[7].outletName",
              "list[7].merchantId",
              "list[7].paymentProcessorName",
              "list[8].authCode",
              "list[8].paymentDate",
              "list[8].qkrRef",
              "list[8].subTotalAmount",
              "list[8].discountAmount",
              "list[8].currency",
              "list[8].paymentProcessorRef",
              "list[8].ref",
              "list[8].transType",
              "list[8].outletId",
              "list[8].totalAmount",
              "list[8].merchantName",
              "list[8].dateCreated",
              "list[8].outletName",
              "list[8].merchantId",
              "list[8].paymentProcessorName",
              "list[9].authCode",
              "list[9].paymentDate",
              "list[9].qkrRef",
              "list[9].subTotalAmount",
              "list[9].discountAmount",
              "list[9].currency",
              "list[9].paymentProcessorRef",
              "list[9].ref",
              "list[9].transType",
              "list[9].outletId",
              "list[9].totalAmount",
              "list[9].merchantName",
              "list[9].dateCreated",
              "list[9].outletName",
              "list[9].merchantId",
              "list[9].paymentProcessorName",
              "list[10].authCode",
              "list[10].paymentDate",
              "list[10].qkrRef",
              "list[10].subTotalAmount",
              "list[10].discountAmount",
              "list[10].currency",
              "list[10].paymentProcessorRef",
              "list[10].ref",
              "list[10].transType",
              "list[10].outletId",
              "list[10].totalAmount",
              "list[10].merchantName",
              "list[10].dateCreated",
              "list[10].outletName",
              "list[10].merchantId",
              "list[10].paymentProcessorName",
              "list[11].authCode",
              "list[11].paymentDate",
              "list[11].qkrRef",
              "list[11].subTotalAmount",
              "list[11].discountAmount",
              "list[11].currency",
              "list[11].paymentProcessorRef",
              "list[11].ref",
              "list[11].transType",
              "list[11].outletId",
              "list[11].totalAmount",
              "list[11].merchantName",
              "list[11].dateCreated",
              "list[11].outletName",
              "list[11].merchantId",
              "list[11].paymentProcessorName",
              "list[12].authCode",
              "list[12].paymentDate",
              "list[12].qkrRef",
              "list[12].subTotalAmount",
              "list[12].discountAmount",
              "list[12].currency",
              "list[12].paymentProcessorRef",
              "list[12].ref",
              "list[12].transType",
              "list[12].outletId",
              "list[12].totalAmount",
              "list[12].merchantName",
              "list[12].dateCreated",
              "list[12].outletName",
              "list[12].merchantId",
              "list[12].paymentProcessorName",
              "list[13].authCode",
              "list[13].paymentDate",
              "list[13].qkrRef",
              "list[13].subTotalAmount",
              "list[13].discountAmount",
              "list[13].currency",
              "list[13].paymentProcessorRef",
              "list[13].ref",
              "list[13].transType",
              "list[13].outletId",
              "list[13].totalAmount",
              "list[13].merchantName",
              "list[13].dateCreated",
              "list[13].outletName",
              "list[13].merchantId",
              "list[13].paymentProcessorName",
              "list[14].authCode",
              "list[14].paymentDate",
              "list[14].qkrRef",
              "list[14].subTotalAmount",
              "list[14].discountAmount",
              "list[14].currency",
              "list[14].paymentProcessorRef",
              "list[14].ref",
              "list[14].transType",
              "list[14].outletId",
              "list[14].totalAmount",
              "list[14].merchantName",
              "list[14].dateCreated",
              "list[14].outletName",
              "list[14].merchantId",
              "list[14].paymentProcessorName",
              "list[15].authCode",
              "list[15].paymentDate",
              "list[15].qkrRef",
              "list[15].subTotalAmount",
              "list[15].discountAmount",
              "list[15].currency",
              "list[15].paymentProcessorRef",
              "list[15].ref",
              "list[15].transType",
              "list[15].outletId",
              "list[15].totalAmount",
              "list[15].merchantName",
              "list[15].dateCreated",
              "list[15].outletName",
              "list[15].merchantId",
              "list[15].paymentProcessorName",
              "list[16].authCode",
              "list[16].paymentDate",
              "list[16].qkrRef",
              "list[16].subTotalAmount",
              "list[16].discountAmount",
              "list[16].currency",
              "list[16].paymentProcessorRef",
              "list[16].ref",
              "list[16].transType",
              "list[16].outletId",
              "list[16].totalAmount",
              "list[16].merchantName",
              "list[16].dateCreated",
              "list[16].outletName",
              "list[16].merchantId",
              "list[16].paymentProcessorName"
            ],
            "request": {
              "application/json": "{}"
            },
            "ordering": 963,
            "response": {
              "application/json": "{\"list\":[{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497454592825,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"2133-057-090\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497454810109,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"4237-498-570\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497520419752,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"2075-726-710\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497520568570,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"2213-533-960\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497520862962,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"4137-143-630\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497520983712,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"5625-649-860\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497524291224,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"1892-477-820\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497526375635,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"1951-414-870\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497526493260,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"8333-553-880\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497526684327,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"7641-298-700\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497526772339,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"9609-939-350\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527395802,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"3955-114-160\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527512681,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"6847-234-710\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527599501,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"3440-658-070\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527777799,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"6382-854-720\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527880165,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"1271-861-240\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"},{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497527981584,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"2714-382-390\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"}]}"
            },
            "name": "Test__external_trans_get",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Qkr will respond with a list of all the transactions that it has been notified about",
        "operationId": "externalTrans.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListExternalTransResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [

        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "externalTrans"
        ]
      }
    },
    "/prodGroup/{id}": {
      "get": {
        "summary": "Finds a prodGroup",
        "x-samples": [
          {
            "ignoreAsserts": [
              "locatedScanId",
              "merchantId",
              "merchantLocId",
              "products[0].id",
              "products[0].mediumImageUrl",
              "products[0].variants[0].amountMinorUnits",
              "products[0].variants[0].id",
              "products[0].variants[0].sku",
              "products[0].variants[0].isDefault",
              "title",
              "merchantName",
              "products[0].smallDescription",
              "products[0].name",
              "products[0].description",
              "products[0].variants[0].stockLevel",
              "products[0].category",
              "id",
              "merchantWideImageUrl"
            ],
            "request": {
              "application/json": "{\"id\":123456}"
            },
            "ordering": 128,
            "response": {
              "application/json": "{\"merchantIconUrl\":null,\"description\":null,\"merchantLocId\":\"143043\",\"title\":\"my menu\",\"merchantName\":\"OpenApi sdk-gen test\",\"products\":[{\"ageRestricted\":null,\"smallDescription\":\"\",\"name\":\"tea\",\"optionSets\":[],\"description\":\"\",\"id\":\"143053\",\"variants\":[{\"isDefault\":true,\"gtin\":null,\"ean\":null,\"variantDetails\":[],\"amountMinorUnits\":200,\"upc\":null,\"currency\":\"AUD\",\"id\":\"143054\",\"priority\":0,\"sku\":\"ba01dafe-efbf-4d4b-af34-10d06497351d\",\"stockLevel\":\"N\"}],\"allowPurchaseNote\":true,\"category\":\"drink\",\"shippingAddressRequired\":false,\"mediumImageUrl\":\"https://d1wfs5jdtdt7am.cloudfront.net/mss/product-placeholder.png\"}],\"transactionType\":\"BUY\",\"shippingRequired\":false,\"termsUrl\":null,\"merchantId\":\"143035\",\"countryCode\":null,\"ageRestrictedMessage\":\"To purchase this product, please confirm that you are over %d years of age.\",\"imageUrl\":null,\"locatedScanId\":\"143052\",\"id\":\"143051\",\"unitPricePreTax\":false,\"merchantWideImageUrl\":\"\"}"
            },
            "name": "Test__prodGroup__id__get",
            "overrides": [
              {
                "id": "getMerchant.list[0].outlets[0].prodGroupSummaries[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Finds the prodGroup for the ID supplied",
        "operationId": "prodGroup.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ProductGroupResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the required Product Group",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "prodGroup"
        ]
      }
    },
    "/user": {
      "post": {
        "summary": "Creates a user",
        "x-samples": [
          {
            "ignoreAsserts": [
              "accessToken.token",
              "accessToken.callbackUrl"
            ],
            "request": {
              "application/json": "{\"lastName\":\"Smith\",\"firstName\":\"Fred\",\"emailAddress\":\"api@remember-integer[16]@testuser@ppol.com\",\"password\":\"qwerty1234\",\"phoneNumber\":\"@remember-integer[10]@\",\"securityQuestion\":\"In what town or city was your mother born?\",\"taxNumber\":\"1234\",\"language\":\"en\",\"countryOfResidence\":\"US\",\"securityQuestionAnswer\":\"Dublin\",\"phoneNumberCountryCode\":\"01\"}"
            },
            "ordering": 102,
            "response": {
              "application/json": "{\"cardId\":null,\"callbackUrl\":\"\",\"accessToken\":{\"expires\":1200,\"token\":\"otk_ZmM3YjRkYTctNWY3Yy00Y2ViLTkwMzctYzc0N2U2ZTJlNzky\"}}"
            },
            "name": "register",
            "overrides": [
              {
                "securityQuestion": "securityQuestion.list[0].text"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates a user",
        "operationId": "user.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiQkrUserCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ]
      },
      "get": {
        "summary": "Gets a user profile",
        "x-samples": [
          {
            "ignoreAsserts": [
              "emailAddress",
              "id",
              "phoneNumberCountryCode",
              "phoneNumber",
              "profilePhotoUrl"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-register\"}"
            },
            "ordering": 103,
            "response": {
              "application/json": "{\"lastName\":\"Smith\",\"cards\":[],\"taxNumber\":\"1234\",\"masterPassMarketingConsent\":false,\"countryOfResidence\":\"US\",\"automaticEmailReceipts\":false,\"phoneNumberCountryCode\":\"1\",\"profilePhotoUrl\":\"https://sandbox.qkr.mastercard.com/qkrsandbox/api/v1/profile/image/152768\",\"defaultCardAlias\":null,\"firstName\":\"Fred\",\"emailAddress\":\"api5541416227213720testuser@ppol.com\",\"phoneNumber\":\"6163285648\",\"masterPassUser\":true,\"requestCvcInAddCard\":\"true\",\"marketingConsent\":false,\"id\":\"152768\",\"requestZipInAddCard\":\"REQUIRED\"}"
            },
            "name": "getProfile",
            "overrides": [
              {
                "X-Auth-Token": "register.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Gets the user profile for the user identified by the supplied access token",
        "operationId": "user.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ]
      },
      "put": {
        "summary": "Updates a user profile with the supplied data",
        "x-samples": [
          {
            "ignoreAsserts": [
              "emailAddress",
              "firstName",
              "id",
              "phoneNumber",
              "taxNumber",
              "phoneNumberCountryCode"
            ],
            "request": {
              "application/json": "{\"firstName\":\"firstName-updated\",\"X-Auth-Token\":\"from-login\",\"id\":\"from get profile\"}"
            },
            "ordering": 115,
            "response": {
              "application/json": "{\"lastName\":\"Smith\",\"cards\":[],\"taxNumber\":\"1234\",\"masterPassMarketingConsent\":false,\"countryOfResidence\":\"US\",\"automaticEmailReceipts\":false,\"phoneNumberCountryCode\":\"US+1\",\"profilePhotoUrl\":null,\"defaultCardAlias\":null,\"firstName\":\"firstName-updated\",\"emailAddress\":\"api5541416227213720testuser@ppol.com\",\"phoneNumber\":\"6163285648\",\"masterPassUser\":true,\"requestCvcInAddCard\":null,\"marketingConsent\":false,\"id\":\"152768\",\"requestZipInAddCard\":null}"
            },
            "name": "Test__user_put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "getProfile.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Updates the user profile with the data supplied.  Only populated values will be updated.  Empty or null field values will leave the existing field values intact.  The list of updateable fields when using a Qkr wallet are automaticEmailReceipts, firstName, lastName, and marketingConsent.  The list of updateable fields when using a MasterPass wallet are automaticEmailReceipts, firstName, lastName, and masterPassMarketingConsent.",
        "operationId": "user.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiUserUpdateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/beneficiary": {
      "post": {
        "summary": "Create beneficiary for the Qkr user for selected merchant",
        "x-samples": [
          {
            "ignoreAsserts": [
              "beneficiaryId"
            ],
            "request": {
              "application/json": "{\"firstName\":\"John\",\"lastName\":\"Smith\",\"beneficiaryCustomFieldValues\":[{\"bcfdValue\":\"1\",\"bcfdName\":\"Year\"}],\"gender\":\"M\",\"merchantId\":\"from-getMerchant\",\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 138,
            "response": {
              "application/json": "{\"beneficiaryId\":9876}"
            },
            "name": "createBeneficiary",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "cardId": "addCard.id"
              },
              {
                "merchantId": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Create beneficiary for the Qkr user for selected merchant",
        "operationId": "beneficiary.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateBeneficiaryResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiBeneficiaryCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "beneficiary"
        ]
      },
      "get": {
        "summary": "Fetch beneficiary list for the Qkr user for selected merchant",
        "x-samples": [
          {
            "ignoreAsserts": [
              "beneficiaryId"
            ],
            "request": {
              "application/json": "{\"merchantId\":\"from-getMerchant\",\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 139,
            "response": {
              "application/json": "{\"beneficiaries[0].firstName\":\"John\",\"beneficiaries[0].lastName\":\"Smith\",\"beneficiaries[0].gender\":\"M\"}"
            },
            "name": "getBeneficiary",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "merchantId": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Fetch beneficiary list for the Qkr user for selected merchant",
        "operationId": "beneficiary.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetBeneficiariesResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "query",
            "format": "int64",
            "name": "merchantId",
            "description": "ID of the merchant to fetch the beneficiaries for",
            "type": "integer",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "beneficiary"
        ]
      }
    },
    "/posOrder/{id}": {
      "put": {
        "summary": "Update an Order. This API is designed for POS systems to communicate with Qkr rather than App systems.",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"id\":\"from-createPosOrder\",\"order\":{\"reference\":\"qkr_reference\",\"amounts\":{\"autoServiceChargeMinorUnits\":\"0\",\"amountDueMinorUnits\":\"1000\",\"discounts\":[{\"amount\":0,\"code\":\"\",\"quantity\":0,\"name\":\"\",\"type\":\"\"}],\"otherServiceChargeMinorUnits\":\"0\",\"payments\":[{\"amount\":0,\"code\":\"payment_code_123\",\"paymentType\":\"qkr\"}],\"subtotalMinorUnits\":\"0\",\"tipPaidMinorUnits\":\"0\",\"paymentMinorUnits\":\"0\",\"taxMinorUnits\":\"0\"},\"shouldAutoCharge\":false,\"isOrderClosed\":false,\"menuItems\":[{\"isDiscounted\":true,\"groupName\":\"menuItem_GroupName\",\"isRefunded\":false,\"subItems\":[{}],\"itemCode\":\"itemCode_123\",\"priceMinorUnits\":0,\"isCondiment\":true,\"name\":\"Latte\",\"description\":\"string\",\"originalPriceMinorUnits\":0}]}}"
            },
            "ordering": 937,
            "response": {
              "application/json": "{\"message\":\"Update successfully\"}"
            },
            "name": "Test__posOrder__id__put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createPosOrder.id"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Update details of the order. This API is designed for POS systems to communicate with Qkr rather than App systems.",
        "operationId": "posOrder.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdatePosOrderResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of Order",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ApiPosOrderUpdateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "posOrder"
        ]
      }
    },
    "/orderSlot/orderAhead": {
      "get": {
        "summary": "Lists order slots",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0]"
            ],
            "request": {
              "application/json": "{\"orderType\":\"COLLECTION\",\"orderTime\":\"1000\",\"siteName\":\"AU.m1.o1\",\"merchantName\":\"AU.m1\"}"
            },
            "ordering": 957,
            "response": {
              "application/json": "{\"list\":[1000]}"
            },
            "name": "Test__order_slot_order_ahead_get",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists order slots available at the merchant site on the request",
        "operationId": "orderSlot.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetAvailableOrderSlotsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "orderAhead",
        "parameters": [
          {
            "in": "query",
            "format": "",
            "name": "merchantName",
            "description": "Name of the merchant who owns the site",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "int64",
            "name": "orderTime",
            "description": "Time of order in UTC milliseconds",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "orderType",
            "description": "Order type of the slots to retrieve. Valid types are 'COLLECTION' and 'DELIVERY'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "shippingAddressId",
            "description": "",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "format": "",
            "name": "siteName",
            "description": "Name of the site whose order slots are retrieved",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "orderSlot"
        ]
      }
    },
    "/posOrder": {
      "post": {
        "summary": "Link to an order at the pos. This API is designed for POS systems to communicate with Qkr rather than App systems.",
        "x-samples": [
          {
            "ignoreAsserts": [
              "orderId"
            ],
            "request": {
              "application/json": "{\"shortReference\":\"1234\",\"outletId\":\"from-getMerchant\"}"
            },
            "ordering": 936,
            "response": {
              "application/json": "{\"orderId\":\"1234\",\"message\":\"Success\"}"
            },
            "name": "createPosOrder",
            "overrides": [
              {
                "outletId": "getMerchant.list[0].outlets[0].id"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Link to an order at the pos. This API is designed for POS systems to communicate with Qkr rather than App systems.",
        "operationId": "posOrder.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreatePosOrderResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiPosOrderCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "posOrder"
        ]
      }
    },
    "/form/{id}": {
      "get": {
        "summary": "Fetch form details",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"9747\",\"beneficiaryId\":\"from.getBeneficiary\"}"
            },
            "ordering": 143,
            "response": {
              "application/json": "{\"form.updatedDate\":1497584275785,\"formElements[0].type\":\"EmergencyContact\",\"beneficiary.lastName\":\"Smith\",\"beneficiary.firstName\":\"John\",\"beneficiary.middleName\":\"\",\"form.formName\":\"AU.m2.o1.d1.pg1.mi3\",\"beneficiary.id\":1234,\"formElements[0].id\":123,\"formElements[0].required\":true,\"formElements[0].label\":\"Emergency Contact Name\",\"form.formRequiresSignature\":false,\"form.isPaid\":false,\"beneficiary.beneficiaryCustomFieldValues\":[],\"form.termsAndConditionsUrl\":false,\"formElements[0].position\":0,\"form.id\":123456,\"beneficiary.gender\":\"M\",\"formElements[0].value\":\"\"}"
            },
            "name": "getForm",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "beneficiaryId": "getBeneficiary.beneficiaries[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Fetch form details",
        "operationId": "form.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFormResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the resource",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "format": "",
            "name": "beneficiaryId",
            "description": "ID of the beneficiary",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "format": "",
            "name": "id",
            "description": "ID of the form",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "form"
        ]
      }
    },
    "/posPaymentNotification/pat": {
      "post": {
        "summary": "Notifies POS of a payment",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"amount\":0,\"orderId\":\"from-Test__order_pat_post\",\"X-Auth-Token\":\"from-login\",\"tip\":0}"
            },
            "ordering": 954,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__posPaymentNotification_pat_post",
            "overrides": [
              {
                "orderId": "Test__order_pat_post.orderId"
              },
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "amount": "Test__order_pat_get.amounts.amountDueMinorUnits"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Notifies the configured POS of a payment and tip amount for a specific Pay at Table POS order",
        "operationId": "posPaymentNotification.create",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiPatPosNotificationCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "posPaymentNotification"
        ]
      }
    },
    "/orderAhead/order": {
      "post": {
        "summary": "Place a collection/delivery order",
        "x-samples": [
          {
            "ignoreAsserts": [
              "paymentProcessorRef",
              "paymentAuthCode"
            ],
            "request": {
              "application/json": "{\"orderType\":\"COLLECTION\",\"siteName\":\"AU.m1.o1\",\"cardPan\":\"5204740009900014\",\"merchantName\":\"AU.m1\",\"products\":[{\"quantity\":1,\"productRefInPos\":\"QKR0000001\",\"productName\":\"ii-AU.m1-AU.m1.o1.d1.pg1-1\"}],\"cvc\":\"123\",\"expMonth\":3,\"customerPhone\":\"12345678\",\"orderTime\":\"1000\",\"expYear\":19,\"X-Auth-Token\":\"from-login\",\"amountInMinorUnits\":1000,\"cardId\":\"from-addCard\",\"orderNotes\":\"test\",\"customerLastName\":\"CardHolder\"}"
            },
            "ordering": 114,
            "response": {
              "application/json": "{\"posPlacedOrderDetails\":null,\"paymentProcessorRef\":\"dummyRef1497527395282\",\"paymentAuthCode\":\"000000\"}"
            },
            "name": "Test__order_ahead_order_post",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "cardId": "addCard.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Place a collection/delivery order at the merchant site on the request",
        "operationId": "orderAhead.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateOrderAheadResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "order",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiOrderAheadCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "orderAhead"
        ]
      }
    },
    "/updatePassword": {
      "put": {
        "summary": "Update Password",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"oldPassword\":\"qwerty1234\",\"X-Auth-Token\":\"from-login\",\"newPassword\":\"secret1234\",\"otpToken\":\"from-verifyOTP\"}"
            },
            "ordering": 903,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__updatePassword_put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "otpToken": "Test_verifyOTP_put.otpToken"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Update password, it matches the old password and it validates the new one",
        "operationId": "updatePassword.update",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdatePasswordCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "updatePassword"
        ]
      }
    },
    "/beneficiary/{id}": {
      "delete": {
        "summary": "Delete beneficiary for the Qkr user for selected merchant",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from.createBeneficiary\"}"
            },
            "ordering": 141,
            "response": {
              "application/json": "{}"
            },
            "name": "deleteBeneficiary",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createBeneficiary.beneficiaryId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Delete beneficiary for the Qkr user for selected merchant",
        "operationId": "beneficiary.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the beneficiary to delete",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "beneficiary"
        ]
      },
      "put": {
        "summary": "Update beneficiary for the Qkr user for selected merchant",
        "x-samples": [
          {
            "ignoreAsserts": [
              "beneficiaryId"
            ],
            "request": {
              "application/json": "{\"firstName\":\"Mike\",\"lastName\":\"Smith\",\"beneficiaryCustomFieldValues\":[{\"bcfdValue\":\"1\",\"bcfdName\":\"Year\"}],\"gender\":\"M\",\"merchantId\":\"from-getMerchant\",\"X-Auth-Token\":\"from-login\",\"id\":\"from-createBeneficiary\"}"
            },
            "ordering": 140,
            "response": {
              "application/json": "{\"beneficiaryId\":1133}"
            },
            "name": "updateBeneficiary",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createBeneficiary.beneficiaryId"
              },
              {
                "merchantId": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Update beneficiary for the Qkr user for selected merchant",
        "operationId": "beneficiary.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateBeneficiaryResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the beneficiary to update",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ApiBeneficiaryUpdateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "beneficiary"
        ]
      }
    },
    "/verifyOTP": {
      "put": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"verifierType\":\"MOBILEPHONE\",\"verifierValue\":\"21345566\",\"otpToken\":\"from-forgot-password\",\"otp\":\"123456\"}"
            },
            "ordering": 901,
            "response": {
              "application/json": "{}"
            },
            "name": "Test_verifyOTP_put",
            "overrides": [
              {
                "otpToken": "Test__forgottenPassword_post.otpToken"
              },
              {
                "verifierValue": "1<getProfile.phoneNumber>"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "verifyOTP.update",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiVerifyOTPCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "verifyOTP"
        ]
      }
    },
    "/externalTrans/{id}": {
      "get": {
        "summary": "Get a single payment where Qkr was not used to pay",
        "x-samples": [
          {
            "ignoreAsserts": [
              "qkrRef",
              "dateCreated"
            ],
            "request": {
              "application/json": "{\"id\":\"from-externalTrans-post\"}"
            },
            "ordering": 965,
            "response": {
              "application/json": "{\"subTotalAmount\":\"100\",\"authCode\":\"test\",\"outletId\":\"13\",\"paymentProcessorRef\":\"test\",\"discountAmount\":\"0\",\"paymentProcessorName\":\"test\",\"merchantName\":\"7\",\"totalAmount\":\"100\",\"outletName\":\"AU.m1.o1\",\"ref\":\"test\",\"dateCreated\":1497529812947,\"transType\":\"test\",\"merchantId\":\"string\",\"qkrRef\":\"3644-728-010\",\"currency\":\"euro\",\"paymentDate\":\"12/01/2017\"}"
            },
            "name": "Test__external_trans_id_get",
            "overrides": [
              {
                "id": "Test__external_trans_post.qkrRef"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "The reference that Qkr generated at notification time should be used to retrieve the transaction information",
        "operationId": "externalTrans.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ExternalTransResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "The reference that Qkr generated when Qkr was notified",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "externalTrans"
        ]
      }
    },
    "/order/pat/{id}": {
      "get": {
        "summary": "Get an order",
        "x-samples": [
          {
            "ignoreAsserts": [
              "amounts.amountDueMinorUnits",
              "menuItems[0].variant",
              "menuItems[1].variant",
              "menuItems[2].variant",
              "menuItems[3].variant",
              "menuItems[4].variant",
              "menuItems[5].variant",
              "menuItems[6].variant",
              "amounts.subtotalMinorUnits",
              "orderType",
              "etaFulfillmentDt",
              "reqFulfillmentDt",
              "menuItems[0].originalPriceMinorUnits",
              "menuItems[0].rawName",
              "menuItems[0].groupName",
              "menuItems[0].priceMinorUnits",
              "menuItems[0].description",
              "menuItems[0].name",
              "menuItems[0].isCondiment",
              "menuItems[0].quantity",
              "menuItems[0].isRefunded",
              "menuItems[0].isDiscounted",
              "menuItems[0].itemCode",
              "menuItems[1].originalPriceMinorUnits",
              "menuItems[1].rawName",
              "menuItems[1].groupName",
              "menuItems[1].priceMinorUnits",
              "menuItems[1].description",
              "menuItems[1].name",
              "menuItems[1].isCondiment",
              "menuItems[1].quantity",
              "menuItems[1].isRefunded",
              "menuItems[1].isDiscounted",
              "menuItems[1].itemCode",
              "menuItems[2].originalPriceMinorUnits",
              "menuItems[2].rawName",
              "menuItems[2].groupName",
              "menuItems[2].priceMinorUnits",
              "menuItems[2].description",
              "menuItems[2].name",
              "menuItems[2].isCondiment",
              "menuItems[2].quantity",
              "menuItems[2].isRefunded",
              "menuItems[2].isDiscounted",
              "menuItems[2].itemCode",
              "menuItems[3].originalPriceMinorUnits",
              "menuItems[3].rawName",
              "menuItems[3].groupName",
              "menuItems[3].priceMinorUnits",
              "menuItems[3].description",
              "menuItems[3].name",
              "menuItems[3].isCondiment",
              "menuItems[3].quantity",
              "menuItems[3].isRefunded",
              "menuItems[3].isDiscounted",
              "menuItems[3].itemCode",
              "menuItems[4].originalPriceMinorUnits",
              "menuItems[4].rawName",
              "menuItems[4].groupName",
              "menuItems[4].priceMinorUnits",
              "menuItems[4].description",
              "menuItems[4].name",
              "menuItems[4].isCondiment",
              "menuItems[4].quantity",
              "menuItems[4].isRefunded",
              "menuItems[4].isDiscounted",
              "menuItems[4].itemCode",
              "menuItems[5].originalPriceMinorUnits",
              "menuItems[5].rawName",
              "menuItems[5].groupName",
              "menuItems[5].priceMinorUnits",
              "menuItems[5].description",
              "menuItems[5].name",
              "menuItems[5].isCondiment",
              "menuItems[5].quantity",
              "menuItems[5].isRefunded",
              "menuItems[5].isDiscounted",
              "menuItems[5].itemCode",
              "menuItems[6].originalPriceMinorUnits",
              "menuItems[6].rawName",
              "menuItems[6].groupName",
              "menuItems[6].priceMinorUnits",
              "menuItems[6].description",
              "menuItems[6].name",
              "menuItems[6].isCondiment",
              "menuItems[6].quantity",
              "menuItems[6].isRefunded",
              "menuItems[6].isDiscounted",
              "menuItems[6].itemCode",
              "createDt",
              "reference"
            ],
            "request": {
              "application/json": "{\"id\":\"from-Test__order_pat_post\"}"
            },
            "ordering": 107,
            "response": {
              "application/json": "{\"reference\":\"null\",\"orderType\":\"null\",\"reqFulfillmentDt\":\"null\",\"amounts\":{\"autoServiceChargeMinorUnits\":0,\"amountDueMinorUnits\":4036,\"discounts\":[],\"subtotalMinorUnits\":4036,\"payments\":[],\"otherServiceChargeMinorUnits\":0,\"tipPaidMinorUnits\":0,\"paymentMinorUnits\":0,\"taxMinorUnits\":0},\"shouldAutoCharge\":\"false\",\"etaFulfillmentDt\":\"null\",\"isOrderClosed\":\"false\",\"menuItems\":[{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":1000,\"name\":\"ii-AU.m1-AU.m1.o1.d1.pg1-1\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":363,\"name\":\"Open Item\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":1000,\"name\":\"AU.m1.o1.d1.pg1.mi1\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":747,\"name\":\"AU.m1.o1.d1.pg1.mi5\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":926,\"name\":\"AU.m1.o1.d1.pg1.mi3\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"false\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":1000,\"name\":\"AU.m1.o1.d1.pg1.mi1\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"},{\"isDiscounted\":\"false\",\"quantity\":1,\"isRefunded\":\"true\",\"itemCode\":\"null\",\"description\":\"null\",\"rawName\":\"null\",\"groupName\":\"null\",\"subItems\":[],\"priceMinorUnits\":-1000,\"name\":\"AU.m1.o1.d1.pg1.mi1\",\"isCondiment\":\"false\",\"variant\":null,\"originalPriceMinorUnits\":\"null\"}],\"createDt\":\"null\",\"customer\":null}"
            },
            "name": "Test__order_pat_get",
            "overrides": [
              {
                "id": "Test__order_pat_post.orderId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Get the order and the order details from the POS. Includes the items ordered",
        "operationId": "order.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PosOrder"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the order to retrieve",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "order"
        ]
      },
      "delete": {
        "summary": "Close an order",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"id\":\"from-Test__order_pat_post\"}"
            },
            "ordering": 990,
            "response": {
              "application/json": "{\"closed\":true}"
            },
            "name": "Test__order_pat_delete",
            "overrides": [
              {
                "id": "Test__order_pat_post.orderId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Closes the order and checks if the POS has outstanding amounts to be paid",
        "operationId": "order.delete",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ClosePatOrderResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the order to delete",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "order"
        ]
      },
      "put": {
        "summary": "Update an order",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"id\":\"Test__order_pat_post.orderId\",\"products\":[{\"quantity\":1,\"productRefInPos\":\"QKR0000001\",\"productName\":\"test\"}]}"
            },
            "ordering": 106,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__order_pat_put",
            "overrides": [
              {
                "id": "Test__order_pat_post.orderId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Update the order by adding items to it.",
        "operationId": "order.update",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": "pat",
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the order to update",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ApiPatOrderUpdateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "order"
        ]
      }
    },
    "/userSession": {
      "post": {
        "summary": "Creates a new session for the user.  This is akin to logging in",
        "x-samples": [
          {
            "ignoreAsserts": [
              "accessToken.token"
            ],
            "request": {
              "application/json": "{\"emailAddress\":\"from-getProfile\",\"password\":\"qwerty1234\"}"
            },
            "ordering": 104,
            "response": {
              "application/json": "{\"accessToken\":{\"expires\":1200,\"token\":\"otk_NDQxN2E2ZTAtNjJkYy00M2ZjLWE1MGItNDMyYzdkYzQzNjM0\"}}"
            },
            "name": "login",
            "overrides": [
              {
                "emailAddress": "getProfile.emailAddress"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "A new access token will be returned in successful scenarios",
        "operationId": "userSession.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserSessionResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiOauthAccessTokenCreateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "userSession"
        ]
      }
    },
    "/country/{id}": {
      "get": {
        "summary": "Country's attributes details",
        "x-samples": [
          {
            "ignoreAsserts": [
              "consumerLegal",
              "terms",
              "privacy",
              "masterPassConsentResponse.masterPassConsentText",
              "masterPassConsentResponse.masterPassPrivacyKey",
              "masterPassConsentResponse.masterPassPrivacyText",
              "masterPassConsentResponse.masterPassTermsKey",
              "masterPassConsentResponse.masterPassTermsText",
              "masterPassConsentResponse.masterPassTermsUrl",
              "consumerLegal",
              "masterPassConsentResponse.masterPassConsentText",
              "masterPassConsentResponse.masterPassPrivacyKey",
              "masterPassConsentResponse.masterPassPrivacyText",
              "masterPassConsentResponse.masterPassTermsKey",
              "masterPassConsentResponse.masterPassTermsText",
              "masterPassConsentResponse.masterPassTermsUrl",
              "masterPassConsentResponse.masterPassPrivacyUrl"
            ],
            "request": {
              "application/json": "{\"id\":\"HK\"}"
            },
            "ordering": 130,
            "response": {
              "application/json": "{\"masterPass\":\"true\",\"code\":\"HK\",\"privacy\":\"\",\"marketingOptInText\":null,\"validateMobile\":\"false\",\"locales\":[{\"name\":\"zh-HK\",\"label\":\"Chinese\"},{\"name\":\"en-GB\",\"label\":\"English\"}],\"phoneNumberMinLength\":\"3\",\"masterPassConsentResponse\":{\"masterPassTermsKey\":\"TERMS\",\"masterPassTermsUrl\":\"https://sandbox.qkr.mastercard.com/qkrsandbox/config/viewResource?name=USMasterPassTerms\",\"masterPassTermsText\":\"\\u4F7F\\u7528\\u689D\\u6B3E\",\"masterPassPrivacyText\":\"\\u53CA\\u79C1\\u96B1\\u653F\\u7B56\",\"masterPassPrivacyKey\":\"PRIV\",\"masterPassPrivacyUrl\":\"https://sandbox.qkr.mastercard.com/qkrsandbox/config/viewResource?name=USMasterPassPrivacy\",\"masterPassConsentText\":\"\\u6211\\u5DF2\\u95B1\\u8B80\\u4E26\\u540C\\u610FMasterPass\\u2122 TERMS and PRIV\"},\"phoneCountryCode\":\"852\",\"consumerLegal\":\"\",\"terms\":\"\",\"name\":\"Hong Kong\",\"nationalIdLegalText\":\"\",\"phoneNumberMaxLength\":\"19\",\"nationalIdLabel\":\"\"}"
            },
            "name": "Test__country_id_get",
            "overrides": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Gets the country detail attributes,  e.g: phone minimum length, terms and condition, masterPass flag, country code etc",
        "operationId": "country.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CountryResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the country to retrieve e.g. US",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "country"
        ]
      }
    },
    "/creditNote/{id}": {
      "get": {
        "summary": "Get the amount of Credit notes for selected merchant",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"productGroupId\"}"
            },
            "ordering": 147,
            "response": {
              "application/json": "{\"departmentCreditBalanceResponse[0].balance\":0,\"departmentCreditBalanceResponse[0].departmentName\":\"Canteen\",\"departmentCreditBalanceResponse[0].currency\":\"USD\",\"departmentCreditBalanceResponse[0].departmentId\":12345}"
            },
            "name": "getCreditNote",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createAuthPayment.authId"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Retrieve credit notes for a selected merchant",
        "operationId": "creditNote.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetCreditNoteAmountResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the merchant that credit notes are retrieved for",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "creditNote"
        ]
      }
    },
    "/beneficiaryCustomField": {
      "get": {
        "summary": "Fetch the Student Settings for creating a beneficiary profile",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"merchantId\":\"from.getMerchant\",\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 142,
            "response": {
              "application/json": "{\"list[0].label\":\"Year\",\"list[0].type\":\"DROPDOWN\",\"list[0].mandatory\":true,\"list[0].options[0]\":\"2015\"}"
            },
            "name": "getBeneficiaryCustomField",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "merchantId": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Fetch the Student Settings for creating a beneficiary profile",
        "operationId": "beneficiaryCustomField.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/BeneficiaryCustomFieldsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "query",
            "format": "int64",
            "name": "merchantId",
            "description": "ID of the merchant to fetch the student settings for",
            "type": "integer",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "beneficiaryCustomField"
        ]
      }
    },
    "/cartItem/{id}": {
      "delete": {
        "summary": "Deletes a cart item",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from cartItem post\"}"
            },
            "ordering": 930,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__cartItem__id__delete",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "Test__cartItem_post.cartItemId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Deletes a cart item",
        "operationId": "cartItem.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the CartItem to delete",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cartItem"
        ]
      },
      "put": {
        "summary": "Updates a cart item",
        "x-samples": [
          {
            "ignoreAsserts": [
              "cartId"
            ],
            "request": {
              "application/json": "{\"purchaseNote\":\"My purchase note for variantId 1023\",\"quantity\":2,\"X-Auth-Token\":\"from-login\",\"selectedOptions\":[],\"id\":\"from cartItem post\",\"variantId\":77777}"
            },
            "ordering": 929,
            "response": {
              "application/json": "{\"cartId\":\"152781\"}"
            },
            "name": "Test__cartItem__id__put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "Test__cartItem_post.cartItemId"
              },
              {
                "variantId": "Test__prodGroup__id__get.products[0].variants[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Updates a cart item",
        "operationId": "cartItem.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateCartItemResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the resource",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/UpdateCartItemCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cartItem"
        ]
      }
    },
    "/trans/{id}": {
      "get": {
        "summary": "Finds a trans",
        "x-samples": [
          {
            "ignoreAsserts": [
              "merchantLocName",
              "currency",
              "merchantLocId",
              "amountBeforeCoupons",
              "cardHolderName",
              "id",
              "maskedPan",
              "merchantBusinessCategory",
              "orderDate",
              "timezone",
              "totalOrderAmount"
            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":12345}"
            },
            "ordering": 121,
            "response": {
              "application/json": "{\"merchantLocName\":\"lalal\",\"collectionTime\":null,\"orderNumber\":null,\"timezone\":\"US/Hawaii\",\"merchantBusinessCategory\":\"Cafe\",\"refundStatus\":null,\"taxName\":null,\"merchantRef\":null,\"currency\":\"USD\",\"shippingAmount\":null,\"id\":\"152776\",\"shortCode\":null,\"transactionItems\":[],\"maskedPan\":\"52** **** **** 0014\",\"tipAmount\":0,\"cardHolderName\":\"John CardHolder\",\"refundReason\":null,\"readyForCollection\":false,\"shippingMethod\":null,\"merchantLocId\":\"143042\",\"amountBeforeCoupons\":3599,\"refundedDate\":null,\"seat\":null,\"taxRate\":0.0,\"merchantOrderNumber\":null,\"totalOrderAmount\":3599,\"locatedScanId\":null,\"taxCalculationsEnabled\":false,\"taxAmount\":0,\"orderDate\":1495723136496,\"fulfilledDate\":null,\"pricesSetPretax\":false}"
            },
            "name": "Test__trans__id__get",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createTrans.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Finds the detailed transaction data for the ID supplied",
        "operationId": "trans.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the required Transaction",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "trans"
        ]
      },
      "put": {
        "summary": "Updates a trans",
        "x-samples": [
          {
            "ignoreAsserts": [
              "collectionTime",
              "transactionId"
            ],
            "request": {
              "application/json": "{\"collectionTime\":0,\"X-Auth-Token\":\"from-login\",\"id\":12345}"
            },
            "ordering": 122,
            "response": {
              "application/json": "{\"collectionTime\":0,\"transactionId\":152776}"
            },
            "name": "Test__trans__id__put",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createTrans.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Updates collection time for the transaction ID supplied",
        "operationId": "trans.update",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateTransResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "int64",
            "name": "id",
            "description": "ID of the required Transaction",
            "type": "integer",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ApiTransUpdateCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "trans"
        ]
      }
    },
    "/forgottenPassword": {
      "post": {
        "summary": "Informs our system that the user has forgotten their password",
        "x-samples": [
          {
            "ignoreAsserts": [
              "otpToken"
            ],
            "request": {
              "application/json": "{\"emailAddress\":\"from-get-profile\"}"
            },
            "ordering": 900,
            "response": {
              "application/json": "{\"verifierType\":\"MOBILEPHONE\",\"forgotPasswordUrl\":null,\"channel\":\"SMS\",\"otpToken\":\"hlTAEw5IKzbuNUnRlsVHi2ACquI=\"}"
            },
            "name": "Test__forgottenPassword_post",
            "overrides": [
              {
                "emailAddress": "getProfile.emailAddress"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "When this endpoint is invoked with a valid email address the response will contain a URL where the user should be directed to change their password. This endpoint returns a 200 OK except when an invalid email is supplied. In this case a 500 Internal Server Error will be returned but there will be no forgotten password URL",
        "operationId": "forgottenPassword.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ForgotPasswordResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiForgotPasswordCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "forgottenPassword"
        ]
      }
    },
    "/merchant/{id}": {
      "get": {
        "summary": "Finds a merchant",
        "x-samples": [
          {
            "ignoreAsserts": [
              "defaultCurrency",
              "imageUrl",
              "name",
              "outlets[0].payAtTable",
              "outlets[0].address",
              "outlets[0].latitude",
              "outlets[0].merchantId",
              "outlets[0].imageUrl",
              "outlets[0].name",
              "outlets[0].id",
              "outlets[0].longitude",
              "outlets[0].prodGroupSummaries[0].name",
              "outlets[0].prodGroupSummaries[0].id",
              "outlets[0].prodGroupSummaries[0].totalCount",
              "outlets[0].isOpen",
              "id",
              "category"
            ],
            "request": {
              "application/json": "{\"id\":1234}"
            },
            "ordering": 123,
            "response": {
              "application/json": "{\"twitter\":null,\"website\":null,\"defaultCurrency\":\"USD\",\"imageUrl\":\"\",\"icon\":null,\"taxCalculationsEnabled\":false,\"name\":\"OpenApi sdk-gen test\",\"outlets\":[{\"payAtTable\":false,\"address\":\"lalal, some city, Alabama\",\"closedReason\":null,\"latitude\":1.0,\"posType\":null,\"isOpen\":true,\"phone\":null,\"merchantId\":\"143035\",\"imageUrl\":\"\",\"name\":\"lalal\",\"iconUrl\":null,\"id\":\"143042\",\"longitude\":1.0,\"prodGroupSummaries\":[{\"name\":\"my menu\",\"id\":\"143051\",\"totalCount\":1}]}],\"id\":\"143035\",\"category\":\"Cafe\",\"pricesSetPretax\":false}"
            },
            "name": "Test__merchant__id__get",
            "overrides": [
              {
                "id": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Finds the merchant for the ID supplied",
        "operationId": "merchant.show",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MerchantResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "ID of the merchant to retrieve",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "merchant"
        ]
      }
    },
    "/formSubmission": {
      "post": {
        "summary": "Create a form submission (submit a form)",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"formId\":\"9747\",\"X-Auth-Token\":\"from-login\",\"beneficiaryId\":\"from-createBeneficiary\",\"formElements\":[{\"id\":\"9748\",\"value\":\"Form element value\"}]}"
            },
            "ordering": 144,
            "response": {
              "application/json": "{}"
            },
            "name": "createFormSubmission",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "beneficiaryId": "getBeneficiary.beneficiaries[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "formSubmission.create",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/SubmitFormCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "formSubmission"
        ]
      },
      "get": {
        "summary": "Fetch form submission list for the Qkr user",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].id",
              "list[0].submittedDate",
              "list[0].form.updatedDate",
              "list[0].beneficiaryId"
            ],
            "request": {
              "application/json": "{\"merchantId\":\"from-getMerchant\",\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 145,
            "response": {
              "application/json": "{\"list[0].id\":1234,\"list[0].form.formName\":\"AU.m2.o1.d1.pg1.mi3ConsentDataService.groovy\",\"list[0].beneficiaryName\":\"Mike Smith\",\"list[0].prodGroupName\":\"AU.m2.o1.d1.pg1\",\"list[0].form.id\":9747,\"list[0].cartId\":null,\"list[0].form.termsAndConditionsUrl\":null,\"list[0].beneficiaryId\":1234,\"list[0].merchantId\":5697,\"list[0].productDescription\":\"product\",\"list[0].form.formRequiresSignature\":false,\"list[0].form.isPaid\":false,\"list[0].productImageUrl\":\"http://test.com/qkr/images/seeddata.png\",\"list[0].merchantName\":\"AU.m2\",\"list[0].paidBy\":false,\"list[0].productName\":\"AU.m2.o1.d1.pg1.mi3\",\"list[0].submittedDate\":1525767162347,\"list[0].form.isConsentRequired\":true,\"list[0].form.updatedDate\":1525767162347}"
            },
            "name": "getFormSubmission",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "merchantId ": "getMerchant.list[0].id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Fetch form submission list for the Qkr user",
        "operationId": "formSubmission.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFormSubmissionsResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "query",
            "format": "int64",
            "name": "merchantId",
            "description": "ID of the merchant to fetch the form submissions for",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "formSubmission"
        ]
      }
    },
    "/vendingSession/{id}": {
      "delete": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\",\"id\":\"from-createVendingSession\"}"
            },
            "ordering": 935,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__vendingSession__id__delete",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "id": "createVendingSession.id"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "vendingSession.delete",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "path",
            "format": "",
            "name": "id",
            "description": "",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "vendingSession"
        ]
      }
    },
    "/country": {
      "get": {
        "summary": "Country's attributes list",
        "x-samples": [
          {
            "ignoreAsserts": [
              "list[0].consumerLegal",
              "list[0].privacy",
              "list[0].terms",
              "list[0].masterPassConsentResponse.masterPassConsentText",
              "list[0].masterPassConsentResponse.masterPassPrivacyKey",
              "list[0].masterPassConsentResponse.masterPassPrivacyText",
              "list[0].masterPassConsentResponse.masterPassTermsKey",
              "list[0].masterPassConsentResponse.masterPassTermsText",
              "list[0].masterPassConsentResponse.masterPassTermsUrl",
              "list[0].masterPassConsentResponse.masterPassPrivacyUrl"
            ],
            "request": {
              "application/json": "{}"
            },
            "ordering": 127,
            "response": {
              "application/json": "{\"list\":[{\"masterPass\":\"true\",\"code\":\"HK\",\"privacy\":\"\",\"marketingOptInText\":null,\"validateMobile\":\"false\",\"locales\":[{\"name\":\"zh-HK\",\"label\":\"Chinese\"},{\"name\":\"en-GB\",\"label\":\"English\"}],\"phoneNumberMinLength\":\"3\",\"masterPassConsentResponse\":{\"masterPassTermsKey\":\"TERMS\",\"masterPassTermsUrl\":\"https://sandbox.qkr.mastercard.com/qkrsandbox/config/viewResource?name=USMasterPassTerms\",\"masterPassTermsText\":\"\\u4F7F\\u7528\\u689D\\u6B3E\",\"masterPassPrivacyText\":\"\\u53CA\\u79C1\\u96B1\\u653F\\u7B56\",\"masterPassPrivacyKey\":\"PRIV\",\"masterPassPrivacyUrl\":\"https://sandbox.qkr.mastercard.com/qkrsandbox/config/viewResource?name=USMasterPassPrivacy\",\"masterPassConsentText\":\"\\u6211\\u5DF2\\u95B1\\u8B80\\u4E26\\u540C\\u610FMasterPass\\u2122 TERMS and PRIV\"},\"phoneCountryCode\":\"852\",\"consumerLegal\":\"\",\"terms\":\"\",\"name\":\"Hong Kong\",\"nationalIdLegalText\":\"\",\"phoneNumberMaxLength\":\"19\",\"nationalIdLabel\":\"\"}]}"
            },
            "name": "Test__country_get",
            "overrides": [

            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Gets the list of countries and their attributes, e.g: phone minimum length, terms and condition, masterPass flag, country code etc",
        "operationId": "country.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetCountriesResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [

        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "country"
        ]
      }
    },
    "/refund": {
      "post": {
        "summary": "Create a full or partial refund request",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"reason\":\"Test\",\"transId\":\"from-createTrans\",\"paymentProcessorRef\":\"1234\",\"amountMinorUnits\":10}"
            },
            "ordering": 962,
            "response": {
              "application/json": "{}"
            },
            "name": "Test__refund_post",
            "overrides": [
              {
                "transId": "createTrans.id"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Either trans id or paymentProcessorRef must be provided, provide amount only for partial refund",
        "operationId": "refund.create",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiRefundCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "refund"
        ]
      }
    },
    "/cartItem": {
      "post": {
        "summary": "Creates a cart item",
        "x-samples": [
          {
            "ignoreAsserts": [
              "cartId",
              "cartItemId"
            ],
            "request": {
              "application/json": "{\"purchaseNote\":\"My purchase note for variantId 1023\",\"quantity\":1,\"X-Auth-Token\":\"from-login\",\"locatedScanId\":123,\"selectedOptions\":[],\"variantId\":77777}"
            },
            "ordering": 129,
            "response": {
              "application/json": "{\"cartId\":\"152781\",\"cartItemId\":\"152782\"}"
            },
            "name": "Test__cartItem_post",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "variantId": "Test__prodGroup__id__get.products[0].variants[0].id"
              },
              {
                "locatedScanId": "Test__prodGroup__id__get.locatedScanId"
              }
            ]
          },
          {
            "ignoreAsserts": [
              "cartId",
              "cartItemId"
            ],
            "request": {
              "application/json": "{\"purchaseNote\":\"My purchase note for variantId 1023\",\"quantity\":1,\"X-Auth-Token\":\"from-login\",\"locatedScanId\":123,\"selectedOptions\":[],\"variantId\":77777}"
            },
            "ordering": 931,
            "response": {
              "application/json": "{\"cartId\":\"152781\",\"cartItemId\":\"152782\"}"
            },
            "name": "Test__cartItem_post_forDelete",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              },
              {
                "variantId": "Test__prodGroup__id__get.products[0].variants[0].id"
              },
              {
                "locatedScanId": "Test__prodGroup__id__get.locatedScanId"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates a cart item",
        "operationId": "cartItem.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AddCartItemResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddCartItemCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "cartItem"
        ]
      }
    },
    "/resendOTP": {
      "post": {
        "summary": "",
        "x-samples": [
          {
            "ignoreAsserts": [
              "otpToken"
            ],
            "request": {
              "application/json": "{\"otpToken\":\"from-forgot-password\"}"
            },
            "ordering": 909,
            "response": {
              "application/json": "{\"verifierType\":\"MOBILEPHONE\",\"otpToken\":\"UBtwnvixwiHrOSU1M0kYOrZ+9PU=\"}"
            },
            "name": "Test__resendOTP_post",
            "overrides": [
              {
                "otpToken": "Test__forgottenPassword_post.otpToken"
              }
            ],
            "type": "sample"
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "",
        "operationId": "resendOTP.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ResendOTPResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiResendOTPCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "resendOTP"
        ]
      }
    },
    "/orderTotal": {
      "post": {
        "summary": "Calculates order totals",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"orderType\":\"COLLECTION\",\"orderTime\":\"1000\",\"siteName\":\"AU.m1.o1\",\"merchantName\":\"AU.m1\",\"products\":[{\"quantity\":1,\"productRefInPos\":\"QKR0000001\",\"productName\":\"ii-AU.m1-AU.m1.o1.d1.pg1-1\"}]}"
            },
            "ordering": 958,
            "response": {
              "application/json": "{\"listPriceMinorUnits\":0,\"netPriceMinorUnits\":0,\"discountMinorUnits\":0,\"surchargeMinorUnits\":0,\"taxMinorUnits\":0}"
            },
            "name": "Test__order_total_post",
            "overrides": [
              {

              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Calculates order total",
        "operationId": "orderTotal.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/PosCalculateTotals"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ApiOrderTotalCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "orderTotal"
        ]
      }
    },
    "/card": {
      "post": {
        "summary": "Create a payment card",
        "x-samples": [
          {
            "ignoreAsserts": [
              "id"
            ],
            "request": {
              "application/json": "{\"expMonth\":\"3\",\"cvc\":\"123\",\"isDefault\":true,\"addressZip\":\"90210\",\"expYear\":\"19\",\"X-Auth-Token\":\"from-login\",\"name\":\"John CardHolder\",\"alias\":\"my card\",\"pan\":\"5204740009900014\"}"
            },
            "ordering": 109,
            "response": {
              "application/json": "{\"isDefault\":true,\"maskedPan\":\"\",\"alias\":\"my card\",\"id\":\"822831a0-7eb0-4242-bb33-7515a823a717\",\"isExpired\":false,\"type\":\"MasterCard\"}"
            },
            "name": "addCard",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates a payment card",
        "operationId": "card.create",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CardResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/AddCardCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "card"
        ]
      },
      "get": {
        "summary": "List cards",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"X-Auth-Token\":\"from-login\"}"
            },
            "ordering": 131,
            "response": {
              "application/json": "{\"list\":[]}"
            },
            "name": "Test__card_get",
            "overrides": [
              {
                "X-Auth-Token": "login.accessToken.token"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Lists cards belonging to the user on the request",
        "operationId": "card.list",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListCardResponse"
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        },
        "x-context": null,
        "parameters": [
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "card"
        ]
      }
    },
    "/userImage": {
      "post": {
        "summary": "Store a user image",
        "x-samples": [
          {
            "ignoreAsserts": [

            ],
            "request": {
              "application/json": "{\"image\":\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z/C/HgAGgwJ/lK3Q6wAAAABJRU5ErkJggg==\",\"format\":\"PNG\",\"email\":\"from.getUser\"}"
            },
            "ordering": 149,
            "response": {
              "application/json": "{}"
            },
            "name": "postUserImage",
            "overrides": [
              {
                "email": "getProfile.emailAddress"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "description": "Store user image",
        "operationId": "userImage.create",
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "204": {
            "description": "Successful operation. No response."
          }
        },
        "x-context": null,
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UpdateUserImageCommand"
            },
            "in": "body",
            "name": "body",
            "description": "Input object",
            "required": true
          },
          {
            "in": "header",
            "format": "string",
            "name": "X-Auth-Token",
            "description": "User (customer) access token",
            "type": "string",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "userImage"
        ]
      }
    }
  },
  "host": "api.mastercard.com",
  "schemes": [
    "http"
  ],
  "definitions": {
    "ApiPosOrderCreateCommand": {
      "properties": {
        "shortReference": {
          "format": "",
          "description": "The short code customer shares with the waiter. Waiter enters that code at the till to link the order at the till with Qkr.",
          "type": "string"
        },
        "outletId": {
          "format": "",
          "description": "Outlet id where the order is created",
          "type": "string"
        }
      },
      "required": [
        "outletId",
        "shortReference"
      ]
    },
    "AddCardCommand": {
      "properties": {
        "addressCountry": {
          "minLength": 2,
          "format": "",
          "description": "Country of the card holder",
          "type": "string",
          "maxLength": 2
        },
        "addressZip": {
          "minLength": 3,
          "format": "",
          "description": "Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers or letters",
          "type": "string",
          "maxLength": 9
        },
        "addressState": {
          "minLength": 2,
          "format": "",
          "description": "State of the card holder address",
          "type": "string",
          "maxLength": 2
        },
        "cvc": {
          "minLength": 3,
          "format": "",
          "description": "CVC security code of the card. This is the code on the back of the card. Example: 123",
          "type": "string",
          "maxLength": 4
        },
        "expMonth": {
          "format": "int32",
          "description": "Expiration month of the card. Format is MM. Example: January = 01",
          "maximum": 12,
          "type": "integer",
          "minimum": 1
        },
        "isDefault": {
          "format": "",
          "description": "Indicates if this is the default card for this user",
          "type": "boolean"
        },
        "expYear": {
          "format": "int32",
          "description": "Expiration year of the card. Format is YY. Example: 2013 = 13",
          "maximum": 99,
          "type": "integer",
          "minimum": 0
        },
        "name": {
          "minLength": 2,
          "format": "",
          "description": "Cardholder Name as it appears on the card",
          "type": "string",
          "maxLength": 50
        },
        "addressLine1": {
          "format": "",
          "description": "Line 1 of the card holder address",
          "type": "string",
          "maxLength": 255
        },
        "alias": {
          "minLength": 1,
          "format": "",
          "description": "Alias of the card",
          "type": "string",
          "maxLength": 20
        },
        "addressLine2": {
          "format": "",
          "description": "Line 2 of the card holder address",
          "type": "string",
          "maxLength": 255
        },
        "addressLine3": {
          "format": "",
          "description": "Line 3 of the card holder address",
          "type": "string",
          "maxLength": 255
        },
        "pan": {
          "format": "",
          "description": "Primary account number of the card",
          "type": "string"
        },
        "addressCity": {
          "minLength": 2,
          "format": "",
          "description": "City of the card holder",
          "type": "string",
          "maxLength": 50
        }
      },
      "required": [
        "alias",
        "expMonth",
        "expYear",
        "pan"
      ]
    },
    "Customer": {
      "properties": {
        "firstName": {
          "format": "",
          "type": "string"
        },
        "lastName": {
          "format": "",
          "type": "string"
        },
        "phone": {
          "format": "",
          "type": "string"
        },
        "email": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName",
        "phone"
      ]
    },
    "PosPlacedOrderDetails": {
      "properties": {
        "posOrderReferenceId": {
          "format": "",
          "description": "ID of the placed order in the POS",
          "type": "string"
        },
        "posOrderConfirmationCode": {
          "format": "",
          "description": "Confirmation code of the placed order in the POS",
          "type": "string"
        }
      },
      "required": [
        "posOrderConfirmationCode",
        "posOrderReferenceId"
      ]
    },
    "OrderCalendarDayBeneficiaryResponse": {
      "properties": {
        "transItems": {
          "description": "List of transaction items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransItemResponse"
          }
        },
        "cartItems": {
          "description": "List of cart items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartLineItemResponse"
          }
        },
        "beneficiaryId": {
          "format": "",
          "description": "ID of the beneficiary",
          "type": "string"
        }
      }
    },
    "FormElementCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "Id of formElement retrieved from GET form API",
          "type": "string"
        },
        "value": {
          "format": "",
          "description": "The user-input value for the corresponding form element",
          "type": "string"
        }
      },
      "required": [
        "id",
        "value"
      ]
    },
    "PosOrderDiscount": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "Amount of discount that was applied",
          "type": "integer"
        },
        "code": {
          "format": "",
          "description": "Code of the discount that was applied",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of discounts that were applied",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Name of the discount that was applied",
          "type": "string"
        },
        "type": {
          "format": "",
          "description": "Type of discount that was applied",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "code",
        "name",
        "quantity",
        "type"
      ]
    },
    "TransactionItemResponse": {
      "properties": {
        "historicalPurchaseData": {
          "description": "Historical purchase information for the transaction item",
          "$ref": "#/definitions/HistoricalPurchaseResponse"
        },
        "amount": {
          "description": "Total amount plus tax of the transaction item, in minor units e.g. cents",
          "$ref": "#/definitions/AmountResponse"
        },
        "purchaseNote": {
          "format": "",
          "description": "An arbitrary note sent with the purchase",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of the transaction item purchased",
          "type": "integer"
        },
        "taxBreakDown": {
          "description": "List of tax components associated with the transaction item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxResponse"
          }
        },
        "productData": {
          "description": "Information about the purchased product associated with the transaction item",
          "$ref": "#/definitions/ProductResponse"
        },
        "productGroupName": {
          "format": "",
          "description": "The name of the ProdGroup to which this transaction item is associated",
          "type": "string"
        },
        "refundStatus": {
          "format": "",
          "description": "Status of a refund.  Possible values are 'P' for partially refunded and 'F' for fully refunded",
          "type": "string"
        },
        "subTotal": {
          "format": "int32",
          "description": "Total amount of the transaction minus tax, in minor units e.g. cents",
          "type": "integer"
        },
        "taxName": {
          "format": "",
          "description": "Name of the tax paid on the transaction item",
          "type": "string"
        },
        "totalAmount": {
          "format": "int32",
          "description": "Total amount of the transaction item",
          "type": "integer"
        },
        "prodGroupId": {
          "format": "",
          "description": "ID of the ProdGroup to which this transaction item is associated",
          "type": "string"
        },
        "refundHistoryItems": {
          "description": "Refund history for a transaction item (to keep track of partial refunds)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RefundHistoryItemResponse"
          }
        },
        "id": {
          "format": "",
          "description": "ID of the transaction item",
          "type": "string"
        },
        "variantId": {
          "format": "",
          "description": "ID of the product variant purchased in the transaction item",
          "type": "string"
        },
        "deliveryDate": {
          "format": "int64",
          "description": "Delivery date of this transaction item",
          "type": "integer"
        },
        "taxAmount": {
          "format": "int32",
          "description": "Transaction tax amount in minor units e.g. cent",
          "type": "integer"
        },
        "userSelections": {
          "description": "Product selections made by the user for the transaction item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSelectionResponse"
          }
        },
        "beneficiaryId": {
          "format": "int64",
          "description": "ID of the beneficiary associated with this transaction item",
          "type": "integer"
        }
      }
    },
    "LightboxUserInteractionResponse": {
      "properties": {
        "paramsJson": {
          "format": "",
          "description": "The parameters for the lightbox action in JSON string format",
          "type": "string"
        },
        "action": {
          "format": "",
          "description": "The name of the action the User completed at the Lightbox URL. Examples are LOGIN_SUCCESS, REGISTER_SUCCESS, EXPRESS_CHECKOUT_AGREED, CHECKOUT_SUCCESS etc.",
          "type": "string"
        },
        "params": {
          "format": "",
          "description": "*DEPRECATED* The parameters for the Lightbox action",
          "type": "string"
        }
      }
    },
    "GetCreditNoteAmountCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the merchant that credit notes are retrieved for",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "DepartmentResponse": {
      "properties": {
        "isDeleted": {
          "format": "",
          "description": "Determines if the department is deleted",
          "type": "boolean"
        },
        "merchantId": {
          "format": "",
          "description": "ID of the merchant",
          "type": "string"
        },
        "name": {
          "format": "",
          "description": "Name of the department",
          "type": "string"
        },
        "isOffline": {
          "format": "",
          "description": "Determines if the department is offline",
          "type": "boolean"
        },
        "id": {
          "format": "",
          "description": "ID of the department",
          "type": "string"
        },
        "prodGroupSummaries": {
          "description": "List of prod group (menu) summaries associated with the department. Use the IDs of these to retrieve full prod group information via the GET ProdGroup API",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdGroupSummaryResponse"
          }
        }
      }
    },
    "DeleteCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the auth to delete/cancel",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "AmountResponse": {
      "properties": {
        "amountMinorUnits": {
          "format": "int32",
          "description": "Amount in minor units e.g. cents",
          "type": "integer"
        },
        "currency": {
          "format": "",
          "description": "Currency code (ISO-4217) associated with the amount",
          "type": "string"
        }
      }
    },
    "BeneficiaryResponse": {
      "properties": {
        "firstName": {
          "format": "",
          "type": "string"
        },
        "lastName": {
          "format": "",
          "type": "string"
        },
        "beneficiaryCustomFieldValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryCustomFieldValueResponse"
          }
        },
        "gender": {
          "format": "",
          "type": "string"
        },
        "middleName": {
          "format": "",
          "type": "string"
        },
        "id": {
          "format": "",
          "type": "string"
        }
      }
    },
    "GetProdGroupCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the required Product Group",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "CreatePosOrderResponse": {
      "properties": {
        "orderId": {
          "format": "",
          "description": "This is the orderId. Use the orderId for subsequent API requests for this Order",
          "type": "string"
        },
        "message": {
          "format": "",
          "description": "Success if the till order is linked to Qkr",
          "type": "string"
        }
      }
    },
    "UpdateCardCommand": {
      "properties": {
        "addressCountry": {
          "minLength": 2,
          "format": "",
          "description": "Country code (ISO-3166-1-alpha-2 code) of residence of the cardholder",
          "type": "string",
          "maxLength": 2
        },
        "deviceType": {
          "format": "",
          "type": "string"
        },
        "addressZip": {
          "minLength": 3,
          "format": "",
          "description": "Postal code of the cardholder. The postal code size is between 5 and 9 in length and only contain numbers or letters",
          "type": "string",
          "maxLength": 9
        },
        "addressState": {
          "minLength": 2,
          "format": "",
          "description": "State code (USPS code) of residence of the cardholder",
          "type": "string",
          "maxLength": 2
        },
        "deviceId": {
          "format": "",
          "type": "string"
        },
        "cvc": {
          "format": "",
          "type": "string"
        },
        "expMonth": {
          "format": "int32",
          "description": "Expiration month of the card. Format is MM. Example: January = 01",
          "maximum": 12,
          "type": "integer",
          "minimum": 1
        },
        "isDefault": {
          "format": "",
          "description": "Determines if this is the default card for the user",
          "type": "boolean"
        },
        "expYear": {
          "format": "int32",
          "description": "Expiration year of the card. Format is YY. Example: 2013 = 13",
          "maximum": 99,
          "type": "integer",
          "minimum": 0
        },
        "name": {
          "minLength": 2,
          "format": "",
          "description": "Cardholder Name as it appears on the card",
          "type": "string",
          "maxLength": 50
        },
        "addressLine1": {
          "format": "",
          "description": "Address of the cardholder",
          "type": "string",
          "maxLength": 255
        },
        "alias": {
          "minLength": 1,
          "format": "",
          "description": "Alias of the card",
          "type": "string",
          "maxLength": 20
        },
        "addressLine2": {
          "format": "",
          "description": "Address of the cardholder if needed",
          "type": "string",
          "maxLength": 255
        },
        "addressLine3": {
          "format": "",
          "description": "Address of the cardholder if needed",
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "format": "",
          "description": "ID of the card to update",
          "type": "string"
        },
        "pan": {
          "format": "",
          "description": "Primary account number of the card",
          "type": "string"
        },
        "addressCity": {
          "minLength": 2,
          "format": "",
          "description": "City of the cardholder",
          "type": "string",
          "maxLength": 50
        }
      },
      "required": [
        "id"
      ]
    },
    "ApiOrderTotalCommand": {
      "properties": {
        "orderType": {
          "format": "",
          "description": "Order type that is applied to the calculation. Valid types are 'COLLECTION' and 'DELIVERY'",
          "type": "string"
        },
        "orderTime": {
          "format": "int64",
          "description": "Time of order in UTC milliseconds",
          "type": "integer"
        },
        "siteName": {
          "format": "",
          "description": "Name of the site to perform calculations on",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the merchant who owns the site",
          "type": "string"
        },
        "products": {
          "description": "List of product items to add to the calculation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosProductCommand"
          }
        }
      },
      "required": [
        "merchantName",
        "orderTime",
        "orderType",
        "products",
        "siteName"
      ]
    },
    "OptionResponse": {
      "properties": {
        "paymentAdjust": {
          "format": "int32",
          "description": "The amount in minor units of the option",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Description of the option selected by the user",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the option selected by the user",
          "type": "string"
        },
        "selectedByDefault": {
          "format": "",
          "description": "Determines if the option is selected by default",
          "type": "boolean"
        }
      }
    },
    "CreateUserResponse": {
      "properties": {
        "cardId": {
          "format": "",
          "description": "ID of the card added as part of the registration.  This will only be set when a card is created as part of the user create API",
          "type": "string"
        },
        "internalAccountId": {
          "format": "",
          "type": "string"
        },
        "callbackUrl": {
          "format": "",
          "type": "string"
        },
        "accessToken": {
          "description": "Container for access token values such as token and expires",
          "$ref": "#/definitions/TokenResponse"
        }
      }
    },
    "ApiVerifyOTPCommand": {
      "properties": {
        "verifierType": {
          "format": "",
          "type": "string"
        },
        "verifierValue": {
          "format": "",
          "type": "string"
        },
        "countryCode": {
          "format": "",
          "type": "string"
        },
        "otpToken": {
          "format": "",
          "type": "string"
        },
        "otp": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "otp",
        "otpToken"
      ]
    },
    "ClosePatOrderResponse": {
      "properties": {
        "closed": {
          "format": "",
          "description": "True if order was closed. False if order is still open",
          "type": "boolean"
        }
      }
    },
    "UpdateCartItemResponse": {
      "properties": {
        "cartId": {
          "format": "",
          "type": "string"
        }
      }
    },
    "ApiRefundCommand": {
      "properties": {
        "reason": {
          "format": "",
          "type": "string"
        },
        "transId": {
          "format": "int64",
          "type": "integer"
        },
        "paymentProcessorRef": {
          "format": "",
          "type": "string"
        },
        "amountMinorUnits": {
          "format": "int32",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": [
        "reason"
      ]
    },
    "GetOrderCalendarCommand": {
      "properties": {
        "startTime": {
          "format": "int64",
          "description": "Start time for fetching the order calendar",
          "type": "integer"
        },
        "endTime": {
          "format": "int64",
          "description": "End time for fetching the order calendar",
          "type": "integer"
        },
        "id": {
          "format": "",
          "description": "ID of the product group for which order calendar is required",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "ApiPaymentAuthCreateCommand": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "The amount, in minor units, to authorize on the specified payment card",
          "type": "integer"
        },
        "cardId": {
          "format": "",
          "description": "ID of the payment card on which the authorization will happen",
          "type": "string"
        },
        "outletId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "amount",
        "cardId"
      ]
    },
    "FormElementResponse": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the form element",
          "type": "string"
        },
        "label": {
          "format": "",
          "description": "Label of the form element",
          "type": "string"
        },
        "position": {
          "format": "int32",
          "description": "Position of the form element",
          "type": "integer"
        },
        "choices": {
          "description": "Choices for the form element",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChoiceResponse"
          }
        },
        "type": {
          "format": "",
          "description": "Type of the form element",
          "type": "string"
        },
        "value": {
          "format": "",
          "description": "Value of the Form Element if any",
          "type": "string"
        },
        "required": {
          "format": "",
          "description": "True if the form element is mandatory",
          "type": "boolean"
        }
      }
    },
    "CreateTransResponse": {
      "properties": {
        "ref": {
          "format": "",
          "description": "Unique Qkr reference of the transaction",
          "type": "string"
        },
        "transShortCode": {
          "format": "",
          "description": "A short term identifier for an order (transaction) at an outlet, unique for one day and then resets",
          "type": "string"
        },
        "maskedPan": {
          "format": "",
          "type": "string"
        },
        "cardHolderName": {
          "format": "",
          "type": "string"
        },
        "bin": {
          "format": "",
          "type": "string"
        },
        "gatewayRef": {
          "format": "",
          "type": "string"
        },
        "masterPassAppLibLiteApiToken": {
          "format": "",
          "description": "Oltio library token",
          "type": "string"
        },
        "expressCheckoutAgreed": {
          "format": "",
          "type": "string"
        },
        "thankYouMessage": {
          "format": "",
          "description": "Thank you message",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the order (transaction)",
          "type": "string"
        },
        "masterPassAppToken": {
          "format": "",
          "description": "Token from Oltio for bank app",
          "type": "string"
        }
      }
    },
    "PosOrderMenuItem": {
      "properties": {
        "isDiscounted": {
          "format": "",
          "description": "Determines if the menu item is discounted",
          "type": "boolean"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "isRefunded": {
          "format": "",
          "description": "Determines if the menu item was refunded",
          "type": "boolean"
        },
        "itemCode": {
          "format": "",
          "description": "Menu item reference code in POS",
          "type": "string"
        },
        "description": {
          "format": "",
          "description": "Description of the menu item",
          "type": "string"
        },
        "rawName": {
          "format": "",
          "description": "The menu item name retrieved from the POS",
          "type": "string"
        },
        "groupName": {
          "format": "",
          "type": "string"
        },
        "subItems": {
          "description": "Menu items contained within this menu item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOrderMenuItem"
          }
        },
        "priceMinorUnits": {
          "format": "int32",
          "description": "Item price after any adjustments e.g. after discount",
          "type": "integer"
        },
        "isCondiment": {
          "format": "",
          "description": "Determines if the menu item is a condiment",
          "type": "boolean"
        },
        "name": {
          "format": "",
          "description": "Name of the menu item",
          "type": "string"
        },
        "variant": {
          "$ref": "#/definitions/PosProductVariant"
        },
        "originalPriceMinorUnits": {
          "format": "int32",
          "description": "Original item price",
          "type": "integer"
        }
      },
      "required": [
        "description",
        "groupName",
        "isCondiment",
        "isDiscounted",
        "isRefunded",
        "itemCode",
        "name",
        "originalPriceMinorUnits",
        "priceMinorUnits",
        "quantity",
        "rawName",
        "subItems",
        "variant"
      ]
    },
    "ApiPatPosNotificationCreateCommand": {
      "properties": {
        "amount": {
          "format": "int64",
          "description": "Amount, in minor units, to notify the POS of",
          "type": "integer"
        },
        "orderId": {
          "format": "",
          "description": "ID of Order associated with the payment to notify the POS about",
          "type": "string"
        },
        "tip": {
          "format": "int64",
          "description": "The tip amount, in minor units, to notify the POS of",
          "type": "integer"
        }
      },
      "required": [
        "amount",
        "orderId",
        "tip"
      ]
    },
    "ApiPosOrderPaymentCommand": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "Amount of payment that was made",
          "type": "integer"
        },
        "code": {
          "format": "",
          "description": "Code of the payment that was made",
          "type": "string"
        },
        "paymentType": {
          "format": "",
          "description": "Type of payment that was made",
          "type": "string"
        }
      }
    },
    "UserDetailResponse": {
      "properties": {
        "firstName": {
          "format": "",
          "description": "User first name",
          "type": "string"
        },
        "lastName": {
          "format": "",
          "description": "User last name",
          "type": "string"
        },
        "extUserId": {
          "format": "",
          "description": "External user ID.  This is usually the same as the userName",
          "type": "string"
        },
        "userName": {
          "format": "",
          "description": "Unique username for the user",
          "type": "string"
        },
        "userId": {
          "format": "",
          "description": "ID of the user",
          "type": "string"
        }
      }
    },
    "ChoiceResponse": {
      "properties": {
        "isDefault": {
          "format": "",
          "description": "True if the label value is default",
          "type": "boolean"
        },
        "label": {
          "format": "",
          "description": "Label of the choice",
          "type": "string"
        }
      }
    },
    "ApiResendOTPCommand": {
      "properties": {
        "otpToken": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "otpToken"
      ]
    },
    "UpdateTransResponse": {
      "properties": {
        "collectionTime": {
          "format": "int64",
          "description": "Estimated collection time by customer",
          "type": "integer"
        },
        "transactionId": {
          "format": "int64",
          "description": "ID of the order (transaction)",
          "type": "integer"
        }
      }
    },
    "BeneficiaryCustomFieldValueResponse": {
      "properties": {
        "bcfdValue": {
          "format": "",
          "type": "string"
        },
        "updateRequiredMessage": {
          "format": "",
          "type": "string"
        },
        "bcfdName": {
          "format": "",
          "type": "string"
        },
        "bcfdType": {
          "format": "",
          "type": "string"
        }
      }
    },
    "UpdateCartItemCommand": {
      "properties": {
        "purchaseNote": {
          "format": "",
          "description": "An optional note to be sent with the purchase",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of the product",
          "maximum": 999,
          "type": "integer",
          "minimum": 1
        },
        "selectedOptions": {
          "description": "Additional product options selected by the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiSelectedOptionCommand"
          }
        },
        "id": {
          "format": "",
          "description": "ID of a cart item.",
          "type": "string"
        },
        "variantId": {
          "format": "",
          "description": "ID of the Product variant being updated to the cart",
          "type": "string"
        }
      },
      "required": [
        "id",
        "quantity",
        "variantId"
      ]
    },
    "BeneficiaryCustomField": {
      "properties": {
        "bcfdValue": {
          "format": "",
          "description": "Beneficiary custom field value for the beneficiary",
          "type": "string"
        },
        "updateRequiredMessage": {
          "format": "",
          "description": "Update required message foe the beneficiary custom field",
          "type": "string"
        },
        "bcfdName": {
          "format": "",
          "description": "Beneficiary custom field name for the beneficiary",
          "type": "string"
        },
        "bcfdType": {
          "format": "",
          "description": "Beneficiary custom field type for the beneficiary",
          "type": "string"
        }
      }
    },
    "CreateOrderAheadResponse": {
      "properties": {
        "posPlacedOrderDetails": {
          "description": "Details of the placed order",
          "$ref": "#/definitions/PosPlacedOrderDetails"
        },
        "paymentProcessorRef": {
          "format": "",
          "description": "Payment processor reference number of the payment, if card details or cardId was provided",
          "type": "string"
        },
        "paymentAuthCode": {
          "format": "",
          "description": "Auth Code of the payment, if card details or cardId was provided",
          "type": "string"
        }
      }
    },
    "ProductResponse": {
      "properties": {
        "ageRestricted": {
          "format": "",
          "description": "Determines if there is an age restriction on this product",
          "type": "boolean"
        },
        "smallDescription": {
          "format": "",
          "description": "Small description of the product",
          "type": "string"
        },
        "description": {
          "format": "",
          "description": "Description of this product",
          "type": "string"
        },
        "variants": {
          "description": "List of variants on this product",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantResponse"
          }
        },
        "mediumImageUrl": {
          "format": "",
          "description": "URL to the product image",
          "type": "string"
        },
        "availableDates": {
          "description": "Product availability dates as time_t in merchant timezone for next 2 weeks",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "form": {
          "description": "Form Details",
          "$ref": "#/definitions/FormResponse"
        },
        "name": {
          "format": "",
          "description": "Name of the product",
          "type": "string"
        },
        "optionSets": {
          "description": "List of option sets associated with this product",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionSetResponse"
          }
        },
        "allowPurchaseNote": {
          "format": "",
          "description": "Determines if a purchase note is allowed to be sent when buying this product",
          "type": "boolean"
        },
        "id": {
          "format": "",
          "description": "ID of the product",
          "type": "string"
        },
        "category": {
          "format": "",
          "description": "Category of the product e.g. Food, Drink",
          "type": "string"
        },
        "shippingAddressRequired": {
          "format": "",
          "description": "Determines if a shipping address is required when purchasing this product",
          "type": "boolean"
        }
      }
    },
    "ApiPosOrderAmountsCommand": {
      "properties": {
        "autoServiceChargeMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "How much is the service charge",
          "type": "integer"
        },
        "amountDueMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "How much is outstanding",
          "type": "integer"
        },
        "discounts": {
          "description": "Applied discounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosOrderDiscountCommand"
          }
        },
        "otherServiceChargeMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "How much is the other service charge",
          "type": "integer"
        },
        "payments": {
          "description": "Applied payments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosOrderPaymentCommand"
          }
        },
        "subtotalMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "Subtotal of all items",
          "type": "integer"
        },
        "tipPaidMinorUnits": {
          "default": "0",
          "format": "int32",
          "type": "integer"
        },
        "paymentMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "How much",
          "type": "integer"
        },
        "taxMinorUnits": {
          "default": "0",
          "format": "int32",
          "description": "How much is tax",
          "type": "integer"
        }
      }
    },
    "ListCardResponse": {
      "properties": {
        "list": {
          "description": "Object list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardResponse"
          }
        }
      }
    },
    "GetSecurityQuestionsResponse": {
      "properties": {
        "list": {
          "description": "List of security questions used when creating a MasterPass user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionResponse"
          }
        }
      }
    },
    "ApiPatOrderCreateCommand": {
      "properties": {
        "tableIdentifier": {
          "format": "",
          "description": "Table identifier to create the order on",
          "type": "string"
        },
        "siteName": {
          "format": "",
          "description": "Site name where the order is created",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Merchant name to create a new order",
          "type": "string"
        }
      },
      "required": [
        "merchantName",
        "siteName",
        "tableIdentifier"
      ]
    },
    "FormSubmissionResponse": {
      "properties": {
        "productImageUrl": {
          "format": "",
          "description": "URL for the image of menu item",
          "type": "string"
        },
        "prodGroupName": {
          "format": "",
          "description": "Name of the menu",
          "type": "string"
        },
        "paidBy": {
          "format": "",
          "description": "Name of the user who paid for the menu item",
          "type": "string"
        },
        "cartId": {
          "format": "int64",
          "description": "ID of the cart if the user has not paid for the menu item",
          "type": "integer"
        },
        "submittedDate": {
          "format": "int64",
          "description": "Date when the form was submitted",
          "type": "integer"
        },
        "productName": {
          "format": "",
          "description": "Name of the menu item",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the merchant",
          "type": "string"
        },
        "form": {
          "description": "Details of the form submitted",
          "$ref": "#/definitions/FormResponse"
        },
        "merchantId": {
          "format": "int64",
          "description": "ID of the merchant",
          "type": "integer"
        },
        "beneficiaryName": {
          "format": "",
          "description": "Name of the beneficiary for whom the form is submitted",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "description": "ID of the form",
          "type": "integer"
        },
        "productDescription": {
          "format": "",
          "description": "Description of the menu item",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "int64",
          "description": "ID of the beneficiary for whom the form is submitted",
          "type": "integer"
        }
      }
    },
    "ApiLightboxCreateCommand": {
      "properties": {
        "lastName": {
          "format": "",
          "description": "Last name of the end user. Optional",
          "type": "string"
        },
        "language": {
          "default": "en",
          "format": "",
          "description": "Language of the user. Optional, defaults to en",
          "type": "string"
        },
        "countryOfResidence": {
          "format": "",
          "description": "Country code of the user in ISO 3166-1 Aplha-2 code format.  Required.",
          "type": "string"
        },
        "deviceId": {
          "format": "",
          "description": "Optional device identifier/signature for fraud checking (must be unique per device)",
          "type": "string",
          "maxLength": 255
        },
        "phoneNumberCountryCode": {
          "format": "",
          "description": "Phone number country code of the end user. MasterPass users only. Optional",
          "type": "string"
        },
        "styleMp": {
          "format": "",
          "type": "string"
        },
        "checkoutType": {
          "format": "",
          "type": "string"
        },
        "products": {
          "description": "Optional list of products being purchased (paymentOnly use case), If the partner is not using qkr cart and it needs to send the products details to the payment processor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiProductDataCommand"
          }
        },
        "emailAddress": {
          "format": "",
          "description": "Email address of the end user. Optional",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "ID of merchant that payment will be made to. Required if paymentOnly.",
          "type": "string"
        },
        "action": {
          "format": "",
          "type": "string"
        },
        "callbackUrl": {
          "format": "",
          "type": "string"
        },
        "formId": {
          "format": "int64",
          "type": "integer"
        },
        "delivery": {
          "format": "",
          "type": "boolean"
        },
        "tipAmount": {
          "format": "int32",
          "description": "Tip in minor units (cents) user will be charged. Optional.",
          "type": "integer"
        },
        "cartId": {
          "format": "int64",
          "description": "Optional ID of cart being purchased (paymentOnly use case)",
          "type": "integer"
        },
        "outletId": {
          "format": "int64",
          "description": "ID of outlet that payment will be made to. Required if paymentOnly.",
          "type": "integer"
        },
        "singleCallback": {
          "format": "",
          "type": "string"
        },
        "amountMinorUnits": {
          "format": "int32",
          "description": "Amount in minor units (cents) user will be charged. Required if paymentOnly.",
          "type": "integer"
        },
        "expressCheckoutAgreed": {
          "format": "",
          "description": "Prior approval from Qkr team is required to use this.",
          "type": "boolean"
        },
        "taxNumber": {
          "format": "",
          "type": "string"
        },
        "firstName": {
          "format": "",
          "description": "First name of the end user. Optional",
          "type": "string"
        },
        "landing": {
          "format": "",
          "description": "The page that the User arrives at. Can be either \"LOGIN\" or \"REGISTER\". Ignored if User is already authenticated or is accessing a seperate flow not to do with login or registration.",
          "type": "string"
        },
        "phoneNumber": {
          "format": "",
          "description": "Phone number of the end user. MasterPass users only. Optional",
          "type": "string"
        },
        "nationalId": {
          "format": "",
          "type": "string"
        },
        "termsAccepted": {
          "format": "",
          "type": "boolean"
        },
        "themeConfig": {
          "$ref": "#/definitions/LightboxThemeConfigCommand"
        },
        "preTaxAmountMinorUnits": {
          "format": "int32",
          "description": "Pre tax amount in minor units (cents). Optional.",
          "type": "integer"
        },
        "partnerTxId": {
          "format": "",
          "description": "ANY unique identifier representing the order (item(s)) the User is paying for. Subsequent requests for payment with the same partnerTxId will receive an error response with code 'duplicate.purchase'",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "int64",
          "type": "integer"
        },
        "paymentOnly": {
          "default": "false",
          "format": "",
          "description": "Boolean indicating lightbox is for payment",
          "type": "boolean"
        }
      },
      "required": [
        "callbackUrl"
      ]
    },
    "GetCreditNoteAmountResponse": {
      "properties": {
        "departmentCreditBalanceResponse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DepartmentCreditBalanceResponse"
          }
        }
      }
    },
    "VariantDetailResponse": {
      "properties": {
        "variantLabel": {
          "format": "",
          "description": "Label of the variant",
          "type": "string"
        },
        "visible": {
          "format": "",
          "description": "Determines if the variant is visible or not.  Can be used to hide certain variants in some use cases",
          "type": "boolean"
        },
        "variantValue": {
          "format": "",
          "description": "Value of the variant",
          "type": "string"
        }
      }
    },
    "ApiTransUpdateCommand": {
      "properties": {
        "collectionTime": {
          "format": "int64",
          "description": "Expected collection time (in UTC milliseconds) of purchased item",
          "type": "integer",
          "minimum": 0
        },
        "id": {
          "format": "int64",
          "description": "ID of the required Transaction",
          "type": "integer"
        }
      },
      "required": [
        "collectionTime",
        "id"
      ]
    },
    "ApiDeleteCommand": {
      "properties": {
        "id": {
          "format": "",
          "type": "string"
        }
      }
    },
    "ApiForgotPasswordCommand": {
      "properties": {
        "emailAddress": {
          "format": "",
          "description": "Email address of the user",
          "type": "string"
        }
      },
      "required": [
        "emailAddress"
      ]
    },
    "ApiBeneficiaryCreateCommand": {
      "properties": {
        "firstName": {
          "format": "",
          "description": "First name of the beneficiary",
          "type": "string"
        },
        "image": {
          "format": "",
          "description": "Image of the beneficiary, base64 encoded string",
          "type": "string"
        },
        "lastName": {
          "format": "",
          "description": "Last name of the beneficiary",
          "type": "string"
        },
        "beneficiaryCustomFieldValues": {
          "description": "Beneficiary custom field values for the beneficiary",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryCustomField"
          }
        },
        "gender": {
          "format": "",
          "description": "Gender of the beneficiary, either M, F or -",
          "type": "string"
        },
        "merchantId": {
          "format": "int64",
          "type": "integer"
        },
        "middleName": {
          "format": "",
          "description": "Middle name of the beneficiary",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "gender",
        "lastName",
        "merchantId"
      ]
    },
    "ApiDeviceIdentifierCommand": {
      "properties": {
        "deviceType": {
          "format": "",
          "description": "Type of the device",
          "type": "string"
        },
        "deviceOs": {
          "format": "",
          "description": "Operation system of the device",
          "type": "string"
        },
        "deviceId": {
          "format": "",
          "description": "ID of the device",
          "type": "string"
        }
      }
    },
    "ExternalTransCreateResponse": {
      "properties": {
        "qkrRef": {
          "format": "",
          "description": "A unique reference to be used to retrieve the stored transaction information",
          "type": "string"
        }
      }
    },
    "AddCartItemResponse": {
      "properties": {
        "cartId": {
          "format": "",
          "description": "ID of the cart containing the created cart item",
          "type": "string"
        },
        "cartItemId": {
          "format": "",
          "description": "ID of the created cart item",
          "type": "string"
        }
      }
    },
    "LightboxThemeConfigCommand": {
      "properties": {
        "secondaryLogoId": {
          "format": "",
          "type": "string"
        },
        "backgroundColor": {
          "format": "",
          "type": "string"
        },
        "cardImgId": {
          "format": "",
          "type": "string"
        },
        "accentColor": {
          "format": "",
          "type": "string"
        },
        "primaryColor": {
          "format": "",
          "type": "string"
        },
        "primaryLogoId": {
          "format": "",
          "type": "string"
        }
      }
    },
    "TransactionResponse": {
      "properties": {
        "collectionTime": {
          "format": "int64",
          "description": "Expected collection time (in UTC milliseconds) of purchased item",
          "type": "integer"
        },
        "merchantLocName": {
          "format": "",
          "description": "Name of the merchant outlet",
          "type": "string"
        },
        "orderNumber": {
          "format": "",
          "description": "Internal order number for the transaction",
          "type": "string"
        },
        "timezone": {
          "format": "",
          "description": "Time zone of the merchant outlet",
          "type": "string"
        },
        "merchantBusinessCategory": {
          "format": "",
          "description": "Business category of the merchant",
          "type": "string"
        },
        "refundStatus": {
          "format": "",
          "description": "Status of a refund.  Possible values are 'P' for partially refunded and 'F' for fully refunded",
          "type": "string"
        },
        "taxName": {
          "format": "",
          "description": "Transaction tax name",
          "type": "string"
        },
        "merchantRef": {
          "format": "",
          "description": "Unique reference from the merchant for the transaction",
          "type": "string"
        },
        "ref": {
          "format": "",
          "description": "Unique Qkr reference of the transaction",
          "type": "string"
        },
        "currency": {
          "format": "",
          "description": "The currency in which the transaction was purchased",
          "type": "string"
        },
        "shippingAmount": {
          "format": "int32",
          "description": "Shipping amount in minor units e.g. cents",
          "type": "integer"
        },
        "id": {
          "format": "",
          "description": "ID of the transaction",
          "type": "string"
        },
        "beneficiaries": {
          "description": "List of beneficiary profiles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryResponse"
          }
        },
        "shortCode": {
          "format": "",
          "description": "A short term identifier for an order (transaction) at an outlet, unique for one day and then resets",
          "type": "string"
        },
        "transactionItems": {
          "description": "List of transaction items within this transaction",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionItemResponse"
          }
        },
        "maskedPan": {
          "format": "",
          "description": "The PAN (with masked fields) used in the purchase of the order",
          "type": "string"
        },
        "cardHolderName": {
          "format": "",
          "description": "The name on the card used in the purchase of the order",
          "type": "string"
        },
        "tipAmount": {
          "format": "int32",
          "description": "Amount of tip paid on the transaction",
          "type": "integer"
        },
        "refundReason": {
          "format": "",
          "description": "The reason the order was refunded",
          "type": "string"
        },
        "readyForCollection": {
          "format": "",
          "description": "Determines if the order is ready for collection",
          "type": "boolean"
        },
        "shippingMethod": {
          "format": "",
          "description": "Shipping method provided by the merchant",
          "type": "string"
        },
        "paymentProcessorRef": {
          "format": "",
          "type": "string"
        },
        "merchantLocId": {
          "format": "",
          "description": "ID of the merchant outlet",
          "type": "string"
        },
        "amountBeforeCoupons": {
          "format": "int32",
          "description": "Transaction amount before coupons were applied",
          "type": "integer"
        },
        "refundedDate": {
          "format": "int64",
          "description": "The date the transaction was refunded",
          "type": "integer"
        },
        "seat": {
          "format": "",
          "description": "The delivery destination used in an order-to-seat transaction",
          "type": "string"
        },
        "taxRate": {
          "format": "float",
          "description": "Transaction tax rate",
          "type": "number"
        },
        "merchantOrderNumber": {
          "format": "",
          "description": "Optional order number, used in the transaction, supplied by the merchant",
          "type": "string"
        },
        "totalOrderAmount": {
          "format": "int32",
          "description": "Total amount of the transaction",
          "type": "integer"
        },
        "locatedScanId": {
          "format": "",
          "description": "ID of the scannable item associated with the transaction",
          "type": "string"
        },
        "taxCalculationsEnabled": {
          "format": "",
          "description": "Determines if tax calculations are enabled for the merchant",
          "type": "boolean"
        },
        "taxAmount": {
          "format": "int32",
          "description": "Transaction tax amount in minor units e.g. cent",
          "type": "integer"
        },
        "fulfilledDate": {
          "format": "int64",
          "description": "The date the transaction was fulfilled",
          "type": "integer"
        },
        "orderDate": {
          "format": "int64",
          "description": "The date that the order/transaction happened",
          "type": "integer"
        },
        "partnerTxId": {
          "format": "",
          "type": "string"
        },
        "pricesSetPretax": {
          "format": "",
          "description": "Determines if prices of items purchased were pre tax",
          "type": "boolean"
        },
        "status": {
          "format": "",
          "type": "string"
        }
      }
    },
    "GetNearbyCommand": {
      "properties": {
        "latitude": {
          "format": "",
          "description": "Latitude coordinate of the required merchants.  If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
          "type": "string"
        },
        "queryString": {
          "format": "",
          "description": "Filter outlet by checking if merchant and outlet's name contains the queryString .  If no queryString is supplied, all merchants configured for the calling partner will be returned",
          "type": "string"
        },
        "longitude": {
          "format": "",
          "description": "Longitude coordinate of the required merchants.  If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
          "type": "string"
        }
      }
    },
    "LocaleResponse": {
      "properties": {
        "name": {
          "format": "",
          "type": "string"
        },
        "label": {
          "format": "",
          "type": "string"
        }
      }
    },
    "OutletResponse": {
      "properties": {
        "payAtTable": {
          "format": "",
          "description": "Determines if this outlet provides a Pay-At-Table experience",
          "type": "boolean"
        },
        "address": {
          "format": "",
          "description": "Outlet address",
          "type": "string"
        },
        "closedReason": {
          "format": "",
          "description": "The reason the outlet is closed",
          "type": "string"
        },
        "latitude": {
          "format": "float",
          "description": "Latitude of the outlet. If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
          "type": "number"
        },
        "posType": {
          "format": "",
          "description": "Point Of Sale system used by the outlet",
          "type": "string"
        },
        "isOpen": {
          "format": "",
          "description": "Determines if the outlet is open",
          "type": "boolean"
        },
        "merchantId": {
          "format": "",
          "description": "ID of the Merchant",
          "type": "string"
        },
        "phone": {
          "format": "",
          "description": "Phone number of the outlet",
          "type": "string"
        },
        "imageUrl": {
          "format": "",
          "description": "URL to the outlet image",
          "type": "string"
        },
        "name": {
          "format": "",
          "description": "The outlet name",
          "type": "string"
        },
        "iconUrl": {
          "format": "",
          "description": "URL to the outlet icon",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the outlet",
          "type": "string"
        },
        "longitude": {
          "format": "float",
          "description": "Longitude of the outlet. If no latitude or longitude are supplied, all merchants configured for the calling partner will be returned",
          "type": "number"
        },
        "prodGroupSummaries": {
          "description": "List of prod group (menu) summaries associated with the outlet. Use the IDs of these to retrieve full prod group information via the GET ProdGroup API",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdGroupSummaryResponse"
          }
        }
      }
    },
    "ShowCommand": {
      "properties": {
        "id": {
          "format": "",
          "type": "string"
        }
      }
    },
    "AddCartItemCommand": {
      "properties": {
        "purchaseNote": {
          "format": "",
          "description": "An optional note to be sent with the purchase",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of the product",
          "maximum": 999,
          "type": "integer",
          "minimum": 1
        },
        "locatedScanId": {
          "format": "",
          "description": "ID of a scannable item.  This is a required field and can be retrieved from ProdGroup response",
          "type": "string"
        },
        "selectedOptions": {
          "description": "Additional product options selected by the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiSelectedOptionCommand"
          }
        },
        "variantId": {
          "format": "",
          "description": "ID of the Product variant being added to the cart",
          "type": "string"
        },
        "deliveryDate": {
          "format": "int64",
          "description": "Delivery date of the product variant being added to the cartapidoc.CartItem.addCartItem.input.prodGroupId.description = ID of the Product Group to which the product belongs",
          "type": "integer"
        },
        "beneficiaryId": {
          "format": "int64",
          "description": "ID of the beneficiary for whom the product is being added to the cart",
          "type": "integer"
        }
      },
      "required": [
        "locatedScanId",
        "quantity",
        "variantId"
      ]
    },
    "ApiOrderAheadMenuCommand": {
      "properties": {
        "orderTime": {
          "format": "int64",
          "description": "Order Time (millis since epoch)",
          "type": "integer"
        },
        "siteName": {
          "format": "",
          "description": "Site name",
          "type": "string"
        },
        "menuTypes": {
          "format": "",
          "description": "Menu Type (comma separated list from OrderAtTable, Collection, Delivery)",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Merchant name",
          "type": "string"
        }
      },
      "required": [
        "menuTypes",
        "merchantName",
        "orderTime",
        "siteName"
      ]
    },
    "FormResponse": {
      "properties": {
        "isPaid": {
          "format": "",
          "description": "True if form related product has been paid ",
          "type": "boolean"
        },
        "termsAndConditionsUrl": {
          "format": "",
          "description": "URL for terms and conditions",
          "type": "string"
        },
        "isConsentRequired": {
          "format": "",
          "description": "True if form requires user consent",
          "type": "boolean"
        },
        "formUrl": {
          "format": "",
          "description": "URL of the form",
          "type": "string"
        },
        "formName": {
          "format": "",
          "description": "Form name",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the form",
          "type": "string"
        },
        "updatedDate": {
          "format": "int64",
          "description": "Updated date of the form",
          "type": "integer"
        },
        "formRequiresSignature": {
          "format": "",
          "description": "True if form requires signature",
          "type": "boolean"
        }
      }
    },
    "ApiSelectedOptionCommand": {
      "properties": {
        "optionId": {
          "format": "",
          "description": "Selected option identifier",
          "type": "string"
        },
        "customPaymentAdjust": {
          "format": "int32",
          "description": "Payment adjustment if not predefined",
          "type": "integer"
        }
      },
      "required": [
        "optionId"
      ]
    },
    "CreateLightboxResponse": {
      "properties": {
        "id": {
          "format": "",
          "type": "string"
        },
        "url": {
          "format": "",
          "type": "string"
        }
      }
    },
    "PaymentAuthResponse": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "The amount in minor units that the card was authorized for",
          "type": "integer"
        },
        "authCode": {
          "format": "",
          "type": "string"
        },
        "cardId": {
          "format": "",
          "description": "ID of the card on which the authorization happened",
          "type": "string"
        },
        "gatewayRef": {
          "format": "",
          "type": "string"
        },
        "authId": {
          "format": "",
          "description": "Authorization code that must be supplied to the capture API to capture the actual payment from the card",
          "type": "string"
        }
      }
    },
    "ProdGroupSummaryResponse": {
      "properties": {
        "name": {
          "format": "",
          "type": "string"
        },
        "id": {
          "format": "",
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserSelectionResponse": {
      "properties": {
        "paymentAdjust": {
          "format": "int32",
          "description": "Monetary value of the user selection",
          "type": "integer"
        },
        "label": {
          "format": "",
          "description": "Name of the user selection",
          "type": "string"
        },
        "type": {
          "format": "",
          "description": "The type of user selection",
          "type": "string"
        },
        "value": {
          "format": "",
          "description": "User selection value",
          "type": "string"
        }
      }
    },
    "ApiProductDataCommand": {
      "properties": {
        "subTotalMinorUnits": {
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "format": "int32",
          "maximum": 99,
          "type": "integer",
          "minimum": 1
        },
        "productRefInPos": {
          "format": "",
          "type": "string"
        },
        "productName": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "productName",
        "quantity",
        "subTotalMinorUnits"
      ]
    },
    "PosOption": {
      "properties": {
        "priceMinorUnits": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "format": "",
          "type": "string"
        },
        "id": {
          "format": "",
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer"
        },
        "selectedByDefault": {
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "name",
        "position",
        "priceMinorUnits",
        "selectedByDefault"
      ]
    },
    "TaxResponse": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "Tax component amount",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Tax component name",
          "type": "string"
        },
        "percent": {
          "format": "",
          "description": "Tax component percentage",
          "type": "string"
        }
      }
    },
    "ResendOTPResponse": {
      "properties": {
        "verifierType": {
          "format": "",
          "type": "string"
        },
        "otpToken": {
          "format": "",
          "type": "string"
        }
      }
    },
    "GetCountriesResponse": {
      "properties": {
        "list": {
          "description": "List of countries attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryResponse"
          }
        }
      }
    },
    "ApiPosOrderCommand": {
      "properties": {
        "reference": {
          "format": "",
          "description": "Order reference",
          "type": "string"
        },
        "amounts": {
          "description": "Total amount",
          "$ref": "#/definitions/ApiPosOrderAmountsCommand"
        },
        "shouldAutoCharge": {
          "format": "",
          "description": "This is the flag to inform Qkr if the order should be auto charged",
          "type": "boolean"
        },
        "isOrderClosed": {
          "format": "",
          "description": "This is the flag to inform Qkr if the order is closed",
          "type": "boolean"
        },
        "menuItems": {
          "description": "The items contained in the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosOrderMenuItemCommand"
          }
        }
      },
      "required": [
        "reference"
      ]
    },
    "GetPosMenusResponse": {
      "properties": {
        "list": {
          "description": "List of menus",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosMenuResponse"
          }
        }
      }
    },
    "HistoricalPurchaseResponse": {
      "properties": {
        "historicalVariantDetail": {
          "description": "Historical record of the product variant purchased in the transaction item",
          "$ref": "#/definitions/VariantDetailResponse"
        },
        "sku": {
          "format": "",
          "description": "Historical record of the name of the product SKU purchased in the transaction item",
          "type": "string"
        },
        "productName": {
          "format": "",
          "description": "Historical record of the name of the product purchased in the transaction item",
          "type": "string"
        }
      }
    },
    "ApiPosOrderDiscountCommand": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "Amount of discount that was applied",
          "type": "integer"
        },
        "code": {
          "format": "",
          "description": "Code of the discount that was applied",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of discounts that were applied",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Name of the discount that was applied",
          "type": "string"
        },
        "type": {
          "format": "",
          "description": "Type of discount that was applied",
          "type": "string"
        }
      }
    },
    "GetSecurityQuestionsCommand": {
      "properties": {
        "country": {
          "format": "",
          "description": "Country ISO code security questions apply to",
          "type": "string"
        },
        "preferredLanguage": {
          "format": "",
          "type": "string"
        }
      }
    },
    "VariantResponse": {
      "properties": {
        "gtin": {
          "format": "",
          "description": "Product Global Trade Item Number - product lookup standard",
          "type": "string"
        },
        "isDefault": {
          "format": "",
          "description": "Determines if this is the default product variant",
          "type": "boolean"
        },
        "ean": {
          "format": "",
          "description": "Product European/International Article Number - a barcode standard",
          "type": "string"
        },
        "variantDetails": {
          "description": "List of variant details associated with the variant",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantDetailResponse"
          }
        },
        "amountMinorUnits": {
          "format": "int32",
          "description": "Amount in minor units e.g. cents",
          "type": "integer"
        },
        "upc": {
          "format": "",
          "description": "Product Universal Product Code - product scanning standard",
          "type": "string"
        },
        "currency": {
          "format": "",
          "description": "Currency code (ISO-4217)",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the product variant",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "description": "Positive integer that may be used to order variants",
          "type": "integer"
        },
        "sku": {
          "format": "",
          "description": "Product Stock Keeping Unit - inventory management standard",
          "type": "string"
        },
        "stockLevel": {
          "format": "",
          "description": "The number of units in stock of the product variant",
          "type": "string"
        }
      }
    },
    "CreateBeneficiaryResponse": {
      "properties": {
        "showNoMatchWarning": {
          "format": "",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "",
          "description": "ID of the created beneficiary",
          "type": "string"
        }
      }
    },
    "DeleteCardCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the card to delete",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "TransactionSummaryResponse": {
      "properties": {
        "tipAmountRefunded": {
          "$ref": "#/definitions/AmountResponse"
        },
        "collectionTime": {
          "format": "int64",
          "description": "Estimated collection time by customer",
          "type": "integer"
        },
        "merchantLocName": {
          "format": "",
          "description": "Name of the merchant outlet",
          "type": "string"
        },
        "merchantIconUrl": {
          "format": "",
          "description": "Icon URL of the Merchant",
          "type": "string"
        },
        "tipAmount": {
          "description": "Amount of tip paid on the transaction",
          "$ref": "#/definitions/AmountResponse"
        },
        "pending": {
          "format": "",
          "description": "Determines if the transaction is pending",
          "type": "boolean"
        },
        "merchantLocId": {
          "format": "",
          "description": "ID of the outlet where the product group resides",
          "type": "string"
        },
        "taxName": {
          "format": "",
          "description": "Transaction tax name",
          "type": "string"
        },
        "transactionId": {
          "format": "",
          "description": "ID of the transaction",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the Merchant who owns the products purchased in the transaction",
          "type": "string"
        },
        "receiptName": {
          "format": "",
          "description": "Receipt name for the transactionTra",
          "type": "string"
        },
        "totalAmountRefunded": {
          "$ref": "#/definitions/AmountResponse"
        },
        "taxRate": {
          "format": "float",
          "description": "Transaction tax rate",
          "type": "number"
        },
        "totalAmount": {
          "description": "Total amount of the transaction",
          "$ref": "#/definitions/AmountResponse"
        },
        "ref": {
          "format": "",
          "description": "Unique Qkr reference of the transaction",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "ID of the Merchant",
          "type": "string"
        },
        "receiptFooter": {
          "format": "",
          "description": "Receipt footer information",
          "type": "string"
        },
        "cardAlias": {
          "format": "",
          "description": "Alias of the card used in the transaction",
          "type": "string"
        },
        "taxAmount": {
          "description": "Transaction tax amount in minor units e.g. cent",
          "$ref": "#/definitions/AmountResponse"
        },
        "partnerTxId": {
          "format": "",
          "type": "string"
        },
        "receiptHeader": {
          "format": "",
          "description": "Receipt header information",
          "type": "string"
        },
        "timestamp": {
          "format": "int64",
          "description": "The time that the transaction happened",
          "type": "integer"
        }
      }
    },
    "BeneficiaryCustomFieldResponse": {
      "properties": {
        "name": {
          "format": "",
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "format": "",
            "type": "string"
          }
        },
        "tooltip": {
          "format": "",
          "type": "string"
        },
        "label": {
          "format": "",
          "type": "string"
        },
        "type": {
          "format": "",
          "type": "string"
        },
        "mandatory": {
          "format": "",
          "type": "boolean"
        }
      }
    },
    "ApiShowCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the order to retrieve",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "PosOrder": {
      "properties": {
        "reference": {
          "format": "",
          "description": "Order reference",
          "type": "string"
        },
        "orderType": {
          "format": "",
          "type": "string"
        },
        "reqFulfillmentDt": {
          "format": "int64",
          "type": "integer"
        },
        "amounts": {
          "description": "total amount",
          "$ref": "#/definitions/PosOrderAmounts"
        },
        "shouldAutoCharge": {
          "format": "",
          "type": "boolean"
        },
        "etaFulfillmentDt": {
          "format": "int64",
          "type": "integer"
        },
        "isOrderClosed": {
          "format": "",
          "description": "This is the flag to check if the order is closed",
          "type": "boolean"
        },
        "menuItems": {
          "description": "The items contained in the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOrderMenuItem"
          }
        },
        "createDt": {
          "format": "int64",
          "type": "integer"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        }
      },
      "required": [
        "amounts",
        "createDt",
        "customer",
        "etaFulfillmentDt",
        "isOrderClosed",
        "menuItems",
        "orderType",
        "reference",
        "reqFulfillmentDt",
        "shouldAutoCharge"
      ]
    },
    "ApiUserUpdateCommand": {
      "properties": {
        "firstName": {
          "format": "",
          "description": "First name of the user.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string",
          "maxLength": 30
        },
        "lastName": {
          "format": "",
          "description": "Last name of the user.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string",
          "maxLength": 30
        },
        "phoneNumber": {
          "format": "",
          "description": "Phone number of the user.  MasterPass users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string",
          "maxLength": 20
        },
        "securityQuestion": {
          "format": "",
          "description": "The security question chosen by the user.  MasterPass users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string"
        },
        "marketingConsent": {
          "format": "",
          "description": "Indicates if the user has consented to receive marketing communications.  Qkr users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "boolean"
        },
        "mobileValidationId": {
          "format": "",
          "type": "string"
        },
        "taxNumber": {
          "format": "",
          "description": "Tax number of the user. This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the user.  This is not an updateable field.  All requests to update a user require a valid access token also",
          "type": "string"
        },
        "masterPassMarketingConsent": {
          "format": "",
          "description": "Indicates if the user consents to receive MasterPass marketing communications.  MasterPass users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "boolean"
        },
        "automaticEmailReceipts": {
          "format": "",
          "description": "Indicates if the user will receive an email after each purchase.  The default value is false",
          "type": "boolean"
        },
        "phoneNumberCountryCode": {
          "format": "",
          "description": "Phone number country code of the user.  MasterPass users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string",
          "maxLength": 3
        },
        "securityQuestionAnswer": {
          "minLength": 3,
          "format": "",
          "description": "Security question answer.  MasterPass users only.  This field is optional.  The existing value will remain intact if no value is supplied",
          "type": "string",
          "maxLength": 30
        }
      },
      "required": [
        "id"
      ]
    },
    "GetFormSubmissionsResponse": {
      "properties": {
        "list": {
          "description": "List of Form Submission",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormSubmissionResponse"
          }
        }
      }
    },
    "UserSessionResponse": {
      "properties": {
        "internalAccountId": {
          "format": "",
          "type": "string"
        },
        "accessToken": {
          "description": "Container for access token values such as token and expires",
          "$ref": "#/definitions/TokenResponse"
        }
      }
    },
    "QuestionResponse": {
      "properties": {
        "text": {
          "format": "",
          "description": "Question text",
          "type": "string"
        }
      }
    },
    "SubmitFormCommand": {
      "properties": {
        "formId": {
          "format": "",
          "description": "Id of form that is being submitted",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "",
          "description": "Id of the beneficiary who the form is being submitted for",
          "type": "string"
        },
        "formElements": {
          "description": "The elements and values for the form that is being submitted",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormElementCommand"
          }
        }
      },
      "required": [
        "beneficiaryId",
        "formId"
      ]
    },
    "ProductGroupResponse": {
      "properties": {
        "merchantIconUrl": {
          "format": "",
          "description": "Icon URL of the Merchant",
          "type": "string"
        },
        "description": {
          "format": "",
          "description": "Description of the product group",
          "type": "string"
        },
        "merchantLocId": {
          "format": "",
          "description": "ID of the outlet where the product group resides",
          "type": "string"
        },
        "title": {
          "format": "",
          "description": "Name of the product group e.g. Lunch, Drinks etc",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the Merchant who owns the products in the product group",
          "type": "string"
        },
        "products": {
          "description": "List of products contained in the product group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductResponse"
          }
        },
        "transactionType": {
          "format": "",
          "description": "Type of transactions handled.  This value is always 'BUY'",
          "type": "string"
        },
        "shippingRequired": {
          "format": "",
          "description": "Determines if shipping is required for this product group",
          "type": "boolean"
        },
        "termsUrl": {
          "format": "",
          "description": "URL of the product group terms",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "ID of the Merchant",
          "type": "string"
        },
        "countryCode": {
          "format": "",
          "description": "ISO Code of the country",
          "type": "string"
        },
        "ageRestrictedMessage": {
          "format": "",
          "description": "Message used to confirm age",
          "type": "string"
        },
        "imageUrl": {
          "format": "",
          "description": "URL of the product group image",
          "type": "string"
        },
        "locatedScanId": {
          "format": "",
          "description": "ID of a scannable item.  This value is required when creating a CartItem resource",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the product group",
          "type": "string"
        },
        "merchantWideImageUrl": {
          "format": "",
          "description": "URL to the Merchant image",
          "type": "string"
        },
        "unitPricePreTax": {
          "format": "",
          "description": "Determines if product group prices are pre-tax",
          "type": "boolean"
        }
      }
    },
    "GetCartsResponse": {
      "properties": {
        "list": {
          "description": "List of carts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartResponse"
          }
        }
      }
    },
    "OptionSetResponse": {
      "properties": {
        "maxSelected": {
          "format": "int32",
          "description": "Max amount of options that can be selected within the set",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Name of the option set",
          "type": "string"
        },
        "options": {
          "description": "List of options in the set",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionResponse"
          }
        },
        "minSelected": {
          "format": "int32",
          "description": "Min amount of options that can be selected within the set",
          "type": "integer"
        },
        "label": {
          "format": "",
          "type": "string"
        },
        "type": {
          "format": "",
          "description": "The type of option set.  Values are 'bool' (Must have exactly one option), 'list1' (Must have two or more options, user must select one only (i.e. min=1, max=1)), 'listN' (Must have two or more options, min/max determines number), 'amount' (No options), and 'list1C' (List of options including a custom option (user enters amount))",
          "type": "string"
        }
      }
    },
    "PosProduct": {
      "properties": {
        "purchaseNote": {
          "format": "",
          "type": "string"
        },
        "legalAge": {
          "format": "int32",
          "type": "integer"
        },
        "isAgeRestricted": {
          "format": "",
          "type": "boolean"
        },
        "description": {
          "format": "",
          "description": "Description of this product",
          "type": "string"
        },
        "productRefInPos": {
          "format": "",
          "description": "Reference code of this product in the POS",
          "type": "string"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosProductVariant"
          }
        },
        "displayPositionOnMenu": {
          "format": "int32",
          "description": "Display order of this product on the menu",
          "type": "integer"
        },
        "isHidden": {
          "format": "",
          "description": "Whether this product should be hidden from being displayed on the menu",
          "type": "boolean"
        },
        "imageUrl": {
          "format": "",
          "description": "Image URL of this product",
          "type": "string"
        },
        "priceMinorUnits": {
          "format": "int32",
          "description": "Price in minor units  of this product",
          "type": "integer"
        },
        "name": {
          "format": "",
          "description": "Name of this product",
          "type": "string"
        },
        "optionSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOptionSet"
          }
        },
        "configIds": {
          "type": "array",
          "items": {
            "format": "",
            "type": "string"
          }
        },
        "id": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "configIds",
        "description",
        "displayPositionOnMenu",
        "id",
        "imageUrl",
        "isAgeRestricted",
        "isHidden",
        "legalAge",
        "name",
        "optionSets",
        "priceMinorUnits",
        "productRefInPos",
        "purchaseNote",
        "variants"
      ]
    },
    "GetTransactionDetailCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the required Transaction",
          "type": "string"
        }
      }
    },
    "MasterPassConsentResponse": {
      "properties": {
        "masterPassTermsKey": {
          "format": "",
          "type": "string"
        },
        "masterPassTermsUrl": {
          "format": "",
          "type": "string"
        },
        "masterPassTermsText": {
          "format": "",
          "type": "string"
        },
        "masterPassPrivacyKey": {
          "format": "",
          "type": "string"
        },
        "masterPassPrivacyText": {
          "format": "",
          "type": "string"
        },
        "masterPassPrivacyUrl": {
          "format": "",
          "type": "string"
        },
        "masterPassConsentText": {
          "format": "",
          "type": "string"
        }
      }
    },
    "ApiOrderAheadOrderSlotCommand": {
      "properties": {
        "orderType": {
          "format": "",
          "description": "Order type of the slots to retrieve. Valid types are 'COLLECTION' and 'DELIVERY'",
          "type": "string"
        },
        "orderTime": {
          "format": "int64",
          "description": "Time of order in UTC milliseconds",
          "type": "integer"
        },
        "siteName": {
          "format": "",
          "description": "Name of the site whose order slots are retrieved",
          "type": "string"
        },
        "shippingAddressId": {
          "format": "",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the merchant who owns the site",
          "type": "string"
        }
      },
      "required": [
        "merchantName",
        "orderTime",
        "orderType",
        "siteName"
      ]
    },
    "MerchantResponse": {
      "properties": {
        "twitter": {
          "format": "",
          "description": "Twitter handle for the Merchant",
          "type": "string"
        },
        "website": {
          "format": "",
          "description": "Website for the Merchant",
          "type": "string"
        },
        "defaultCurrency": {
          "format": "",
          "description": "Default currency used by the Merchant",
          "type": "string"
        },
        "imageUrl": {
          "format": "",
          "description": "URL to the merchant image",
          "type": "string"
        },
        "icon": {
          "format": "",
          "description": "Icon for the Merchant",
          "type": "string"
        },
        "name": {
          "format": "",
          "description": "Name of the merchant",
          "type": "string"
        },
        "taxCalculationsEnabled": {
          "format": "",
          "description": "Determines if tax calculations are enabled",
          "type": "boolean"
        },
        "outlets": {
          "description": "List of live outlets for the merchant",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutletResponse"
          }
        },
        "departments": {
          "description": "List of departments for the merchant, applicable to School, University and Supplier business category",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DepartmentResponse"
          }
        },
        "id": {
          "format": "",
          "description": "ID of the Merchant",
          "type": "string"
        },
        "category": {
          "format": "",
          "description": "Business category of the Merchant for example Stadium, School, Cafe, Restaurant etc",
          "type": "string"
        },
        "pricesSetPretax": {
          "format": "",
          "description": "Determines if prices are set pre tax",
          "type": "boolean"
        }
      }
    },
    "PurchaseCreateCommand": {
      "properties": {
        "deviceType": {
          "format": "",
          "description": "Type of device where the request originated",
          "type": "string"
        },
        "orderType": {
          "format": "",
          "type": "string"
        },
        "authCode": {
          "format": "",
          "type": "string"
        },
        "collectionTime": {
          "format": "int64",
          "description": "Expected collection time (in UTC milliseconds) of purchased item",
          "type": "integer"
        },
        "tipAmount": {
          "format": "int32",
          "description": "The tip amount in minor units",
          "type": "integer"
        },
        "cartId": {
          "format": "",
          "description": "ID of the cart to purchase",
          "type": "string"
        },
        "outletId": {
          "format": "int64",
          "type": "integer"
        },
        "amountMinorUnits": {
          "format": "int32",
          "type": "integer"
        },
        "expressCheckoutAgreed": {
          "format": "",
          "type": "boolean"
        },
        "shippingAddressId": {
          "format": "",
          "type": "string"
        },
        "cvc2": {
          "format": "",
          "description": "CVC security code of the card. This is the code on the back of the card. Example: 123",
          "type": "string"
        },
        "deviceId": {
          "format": "",
          "description": "ID of the device where the request originated.  If supplied, this is the device where notification of the purchase will be sent",
          "type": "string"
        },
        "cartTotalAmount": {
          "format": "int32",
          "description": "The total amount of the cart as known by the client.  If the server calculates a different",
          "type": "integer"
        },
        "deliverTo": {
          "format": "",
          "description": "The delivery destination for the purchase, for example this could be a seat in a stadium",
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiProductDataCommand"
          }
        },
        "lightboxDataId": {
          "format": "",
          "type": "string"
        },
        "cardId": {
          "format": "",
          "description": "ID of the card used for the purchase",
          "type": "string"
        },
        "gatewayRef": {
          "format": "",
          "type": "string"
        },
        "preTaxAmountMinorUnits": {
          "format": "int32",
          "type": "integer"
        },
        "card": {
          "$ref": "#/definitions/ApiCardCommand"
        },
        "partnerTxId": {
          "format": "",
          "description": "ANY unique identifier representing the order (item(s)) the User is paying for. Subsequent requests for payment with the same partnerTxId will receive an error response with code 'duplicate.purchase'",
          "type": "string"
        }
      }
    },
    "GetFormCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the form",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "",
          "description": "ID of the beneficiary",
          "type": "string"
        }
      }
    },
    "ApiQkrUserCreateCommand": {
      "properties": {
        "lastName": {
          "format": "",
          "description": "Last name of the user.  Required for MasterPass users",
          "type": "string",
          "maxLength": 30
        },
        "securityQuestion": {
          "format": "",
          "description": "Security question.  Required for MasterPass users",
          "type": "string"
        },
        "mobileValidationId": {
          "format": "",
          "type": "string"
        },
        "taxNumber": {
          "format": "",
          "description": "Tax Number of the user",
          "type": "string"
        },
        "language": {
          "format": "",
          "description": "Language of the user.  Required for MasterPass users",
          "type": "string"
        },
        "masterPassMarketingConsent": {
          "default": "false",
          "format": "",
          "description": "Determines if the user consents to receiving MasterPass material.  MasterPass users only",
          "type": "boolean"
        },
        "automaticEmailReceipts": {
          "default": "false",
          "format": "",
          "description": "Determines if the user will receive an email for each purchase.  The default value is false",
          "type": "boolean"
        },
        "countryOfResidence": {
          "format": "",
          "description": "Country of the user in ISO 3166-1 Aplha-2 code format. Required for MasterPass users",
          "type": "string"
        },
        "phoneNumberCountryCode": {
          "format": "",
          "description": "Phone number country code of the user. Required for MasterPass users",
          "type": "string",
          "maxLength": 3
        },
        "securityQuestionAnswer": {
          "minLength": 3,
          "format": "",
          "description": "Security question answer.  Required for MasterPass users",
          "type": "string",
          "maxLength": 30
        },
        "firstName": {
          "format": "",
          "description": "First name of the user.  Required for MasterPass users",
          "type": "string",
          "maxLength": 30
        },
        "emailAddress": {
          "format": "",
          "description": "Email address of the user. Required for all user types",
          "type": "string"
        },
        "password": {
          "format": "",
          "description": "Password.  Required for MasterPass users",
          "type": "string"
        },
        "deviceIdentifier": {
          "description": "Holder for device information",
          "$ref": "#/definitions/ApiDeviceIdentifierCommand"
        },
        "phoneNumber": {
          "format": "",
          "description": "Phone number for the user.  Required for MasterPass users",
          "type": "string",
          "maxLength": 20
        },
        "nationalId": {
          "format": "",
          "type": "string"
        },
        "marketingConsent": {
          "default": "false",
          "format": "",
          "description": "Indicates if the user has given consent to receive marketing communications",
          "type": "boolean"
        },
        "anonymous": {
          "default": "false",
          "format": "",
          "description": "Determines if an anonymous user should be created",
          "type": "boolean"
        },
        "card": {
          "description": "Optional payment card that can be added as part of the user create API",
          "$ref": "#/definitions/AddCardCommand"
        }
      }
    },
    "ShowLightboxResponse": {
      "properties": {
        "list": {
          "description": "The list of actions the user carried out at the Lightbox in chronological order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LightboxUserInteractionResponse"
          }
        }
      }
    },
    "ExternalTransResponse": {
      "properties": {
        "subTotalAmount": {
          "format": "",
          "description": "The total value of the transaction before discount(s)",
          "type": "string"
        },
        "authCode": {
          "format": "",
          "description": "The auth code retrieved when the payment was taken",
          "type": "string"
        },
        "outletId": {
          "format": "",
          "description": "The ID of the outlet where the transaction took place",
          "type": "string"
        },
        "paymentProcessorRef": {
          "format": "",
          "description": "The reference returned from the payment processor who completed the transaction",
          "type": "string"
        },
        "discountAmount": {
          "format": "",
          "description": "The total value of discount(s) received by the customer",
          "type": "string"
        },
        "paymentProcessorName": {
          "format": "",
          "description": "The name of the payment processor who completed the transaction",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "The name of the merchant where the transaction took place",
          "type": "string"
        },
        "outletName": {
          "format": "",
          "description": "The name of the outlet where the transaction took place",
          "type": "string"
        },
        "totalAmount": {
          "format": "",
          "description": "The total value of the transaction",
          "type": "string"
        },
        "ref": {
          "format": "",
          "description": "Partner's internal reference of the transaction",
          "type": "string"
        },
        "dateCreated": {
          "format": "int64",
          "description": "The date Qkr was notified of the transaction",
          "type": "integer"
        },
        "transType": {
          "format": "",
          "description": "The type of transaction. One of [MASTERPASS, NONMASTERPASS]",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "The ID of the merchant where the transaction took place",
          "type": "string"
        },
        "qkrRef": {
          "format": "",
          "description": "The unique reference that Qkr returned when it was notified of the transaction",
          "type": "string"
        },
        "currency": {
          "format": "",
          "description": "The currency with which the transaction was paid",
          "type": "string"
        },
        "paymentDate": {
          "format": "",
          "description": "The date the payment was made",
          "type": "string"
        }
      }
    },
    "ApiVendingSessionResponse": {
      "properties": {
        "sessionRefId": {
          "format": "",
          "type": "string"
        },
        "payload": {
          "format": "",
          "type": "string"
        },
        "sessionStatus": {
          "format": "",
          "type": "string"
        },
        "id": {
          "format": "",
          "type": "string"
        }
      }
    },
    "GetFormResponse": {
      "properties": {
        "beneficiary": {
          "description": "Beneficiary Details",
          "$ref": "#/definitions/BeneficiaryResponse"
        },
        "form": {
          "description": "Form Details",
          "$ref": "#/definitions/FormResponse"
        },
        "formElements": {
          "description": "Form Elements Details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormElementResponse"
          }
        }
      }
    },
    "OrderCalendarDayResponse": {
      "properties": {
        "date": {
          "format": "int64",
          "description": "Date for which the order calendar details is",
          "type": "integer"
        },
        "orderCalendarDayBeneficiaries": {
          "description": "List of order calendar for each beneficiary",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderCalendarDayBeneficiaryResponse"
          }
        },
        "locked": {
          "format": "",
          "description": "True if the prod group is unavailable for the given date",
          "type": "boolean"
        }
      }
    },
    "GetTransactionsCommand": {
      "properties": {
        "from": {
          "default": "0",
          "format": "int32",
          "description": "The starting point for the transaction search",
          "type": "integer",
          "minimum": 0
        },
        "to": {
          "default": "20",
          "format": "int32",
          "description": "The number of transactions to return",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "from",
        "to"
      ]
    },
    "PosProductVariant": {
      "properties": {
        "imageUrl": {
          "format": "",
          "type": "string"
        },
        "priceMinorUnits": {
          "type": "integer"
        },
        "variantRefInPos": {
          "format": "",
          "type": "string"
        },
        "name": {
          "format": "",
          "type": "string"
        },
        "optionSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOptionSet"
          }
        },
        "description": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "description",
        "imageUrl",
        "name",
        "optionSets",
        "priceMinorUnits",
        "variantRefInPos"
      ]
    },
    "ApiPosOrderUpdateCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of Order",
          "type": "string"
        },
        "order": {
          "description": "The order to update",
          "$ref": "#/definitions/ApiPosOrderCommand"
        }
      },
      "required": [
        "id",
        "order"
      ]
    },
    "ApiPosProductCommand": {
      "properties": {
        "quantity": {
          "format": "int32",
          "description": "Quantity of the product item to add",
          "maximum": 99,
          "type": "integer",
          "minimum": 1
        },
        "productRefInPos": {
          "format": "",
          "description": "Reference code of the product in the POS",
          "type": "string"
        },
        "productName": {
          "format": "",
          "description": "Name of the product",
          "type": "string"
        }
      },
      "required": [
        "productRefInPos",
        "quantity"
      ]
    },
    "GetBeneficiaryCustomFieldsCommand": {
      "properties": {
        "merchantId": {
          "format": "int64",
          "description": "ID of the merchant to fetch the student settings for",
          "type": "integer"
        }
      },
      "required": [
        "merchantId"
      ]
    },
    "PosOrderPayment": {
      "properties": {
        "amount": {
          "format": "int32",
          "description": "Amount of payment that was made",
          "type": "integer"
        },
        "code": {
          "format": "",
          "description": "Code of the payment that was made",
          "type": "string"
        },
        "paymentType": {
          "format": "",
          "description": "Type of payment that was made",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "code",
        "paymentType"
      ]
    },
    "RefundHistoryItemResponse": {
      "properties": {
        "amountBeforeRefund": {
          "format": "int32",
          "description": "Amount of the transaction before the refund is applied",
          "type": "integer"
        },
        "refundedReason": {
          "format": "",
          "description": "Reason for the refund",
          "type": "string"
        },
        "amountAfterRefund": {
          "format": "int32",
          "description": "Amount of the transaction after the refund is applied",
          "type": "integer"
        },
        "refundedQuantity": {
          "format": "int32",
          "description": "Number of items refunded",
          "type": "integer"
        },
        "refundDate": {
          "format": "int64",
          "description": "Date of the refund",
          "type": "integer"
        }
      }
    },
    "UpdateCreditNoteAmountCommand": {
      "properties": {
        "transItemIds": {
          "description": "IDs of the transaction items that are going to be cancelled",
          "type": "array",
          "items": {
            "format": "",
            "type": "string"
          }
        }
      },
      "required": [
        "transItemIds"
      ]
    },
    "UpdatePasswordCommand": {
      "properties": {
        "oldPassword": {
          "format": "",
          "type": "string"
        },
        "newPassword": {
          "format": "",
          "type": "string"
        },
        "otpToken": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "newPassword"
      ]
    },
    "PosMenuResponse": {
      "properties": {
        "menuType": {
          "format": "",
          "description": "Type of the menu",
          "type": "string"
        },
        "categories": {
          "description": "List of product categories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosCategory"
          }
        }
      }
    },
    "UpdatePosOrderResponse": {
      "properties": {
        "message": {
          "format": "",
          "description": "Success if the order is updated",
          "type": "string"
        }
      }
    },
    "ApiPatMenuCommand": {
      "properties": {
        "siteName": {
          "format": "",
          "description": "Name of the site whose menu is retrieved",
          "type": "string"
        },
        "menuTypes": {
          "format": "",
          "description": "Types of menus to retrieve, comma separated. Valid values: OrderAtTable",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the merchant who owns the site",
          "type": "string"
        }
      },
      "required": [
        "menuTypes",
        "merchantName",
        "siteName"
      ]
    },
    "TokenResponse": {
      "properties": {
        "expires": {
          "format": "int32",
          "description": "The time until the token expires",
          "type": "integer"
        },
        "token": {
          "format": "",
          "description": "Unique token value typically representing an access or refresh token",
          "type": "string"
        }
      }
    },
    "CardResponse": {
      "properties": {
        "backgroundColor": {
          "format": "",
          "type": "string"
        },
        "isDefault": {
          "format": "",
          "description": "Determines if this card is the default",
          "type": "boolean"
        },
        "maskedPan": {
          "format": "",
          "description": "Last four digits of primary account card number",
          "type": "string"
        },
        "cardHolderName": {
          "format": "",
          "type": "string"
        },
        "imageUrl": {
          "format": "",
          "type": "string"
        },
        "alias": {
          "format": "",
          "description": "Alias for the payment card",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the payment card",
          "type": "string"
        },
        "isExpired": {
          "format": "",
          "description": "Determines if this card is expired",
          "type": "boolean"
        },
        "type": {
          "format": "",
          "description": "The payment card type e.g. MASTERCARD, VISA etc",
          "type": "string"
        }
      }
    },
    "PosCategory": {
      "properties": {
        "name": {
          "format": "",
          "description": "Name of this category",
          "type": "string"
        },
        "description": {
          "format": "",
          "description": "Description of this category",
          "type": "string"
        },
        "products": {
          "description": "List of products in this category",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosProduct"
          }
        }
      },
      "required": [
        "description",
        "name",
        "products"
      ]
    },
    "ListExternalTransResponse": {
      "properties": {
        "list": {
          "description": "Object list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalTransResponse"
          }
        }
      }
    },
    "UpdateBeneficiaryResponse": {
      "properties": {
        "showNoMatchWarning": {
          "format": "",
          "type": "string"
        },
        "beneficiaryId": {
          "format": "",
          "description": "ID of the updated beneficiary",
          "type": "string"
        }
      }
    },
    "ApiCardCommand": {
      "properties": {
        "addressCountry": {
          "minLength": 2,
          "format": "",
          "type": "string",
          "maxLength": 2
        },
        "cvc": {
          "format": "",
          "type": "string"
        },
        "expMonth": {
          "format": "int32",
          "maximum": 12,
          "type": "integer",
          "minimum": 1
        },
        "addressZip": {
          "minLength": 3,
          "format": "",
          "type": "string",
          "maxLength": 9
        },
        "expYear": {
          "format": "int32",
          "maximum": 99,
          "type": "integer",
          "minimum": 0
        },
        "name": {
          "minLength": 2,
          "format": "",
          "type": "string",
          "maxLength": 50
        },
        "addressLine1": {
          "format": "",
          "type": "string",
          "maxLength": 255
        },
        "alias": {
          "minLength": 1,
          "format": "",
          "type": "string",
          "maxLength": 20
        },
        "addressLine2": {
          "format": "",
          "type": "string",
          "maxLength": 255
        },
        "addressState": {
          "minLength": 2,
          "format": "",
          "type": "string",
          "maxLength": 2
        },
        "pan": {
          "format": "",
          "type": "string"
        },
        "addressCity": {
          "minLength": 2,
          "format": "",
          "type": "string",
          "maxLength": 50
        }
      },
      "required": [
        "alias",
        "expMonth",
        "expYear",
        "pan"
      ]
    },
    "GetBeneficiariesCommand": {
      "properties": {
        "merchantId": {
          "format": "int64",
          "description": "ID of the merchant to fetch the beneficiaries for",
          "type": "integer"
        }
      },
      "required": [
        "merchantId"
      ]
    },
    "GetFormSubmissionsCommand": {
      "properties": {
        "merchantId": {
          "format": "int64",
          "description": "ID of the merchant to fetch the form submissions for",
          "type": "integer"
        }
      }
    },
    "CartItemResponse": {
      "properties": {
        "purchaseNote": {
          "format": "",
          "description": "An arbitrary note sent with the purchase",
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "description": "Quantity of the item purchased",
          "type": "integer"
        },
        "productId": {
          "format": "",
          "description": "ID of the product related to this cart item",
          "type": "string"
        },
        "productVariantId": {
          "format": "",
          "description": "ID of the product variant related to this cart item",
          "type": "string"
        },
        "scanId": {
          "format": "",
          "description": "ID of the scannable associated with this cart item",
          "type": "string"
        },
        "productGroupId": {
          "format": "",
          "description": "ID of the ProdGroup related to this cart item",
          "type": "string"
        },
        "taxBreakDown": {
          "description": "List of tax components associated with the transaction item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxResponse"
          }
        },
        "amountMinorUnits": {
          "format": "int32",
          "description": "Amount in minor units e.g. cents",
          "type": "integer"
        },
        "deliveryDateStr": {
          "format": "",
          "description": "Delivery date in String format, of the cart item (if the cart is for delivery)",
          "type": "string"
        },
        "subTotal": {
          "format": "int32",
          "description": "Total amount of the cart item minus tax, in minor units e.g. cents",
          "type": "integer"
        },
        "productName": {
          "format": "",
          "description": "Name of the product",
          "type": "string"
        },
        "taxName": {
          "format": "",
          "description": "Name of the tax paid on the cart",
          "type": "string"
        },
        "totalAmount": {
          "format": "int32",
          "description": "Total amount of the cart item",
          "type": "integer"
        },
        "imageUrl": {
          "format": "",
          "description": "URL of the product image",
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionResponse"
          }
        },
        "paid": {
          "format": "",
          "description": "Determines is the cart item is paid",
          "type": "boolean"
        },
        "variant": {
          "description": "The product variant related to the cart item",
          "$ref": "#/definitions/VariantResponse"
        },
        "currency": {
          "format": "",
          "description": "Currency code (ISO-4217) associated with the amount",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the cart item",
          "type": "string"
        },
        "deliveryDate": {
          "format": "int64",
          "description": "Delivery date, in Long format, of the cart item (if the cart is for delivery)",
          "type": "integer"
        },
        "taxAmount": {
          "format": "int32",
          "description": "Cart item tax amount in minor units e.g. cent",
          "type": "integer"
        },
        "user": {
          "description": "Details of the user purchasing the cart item",
          "$ref": "#/definitions/UserDetailResponse"
        },
        "productDescription": {
          "format": "",
          "description": "Description of the product",
          "type": "string"
        }
      }
    },
    "PosOrderAmounts": {
      "properties": {
        "autoServiceChargeMinorUnits": {
          "format": "int32",
          "description": "How much is the service charge",
          "type": "integer"
        },
        "amountDueMinorUnits": {
          "format": "int32",
          "description": "How much is outstanding",
          "type": "integer"
        },
        "discounts": {
          "description": "Applied discounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOrderDiscount"
          }
        },
        "otherServiceChargeMinorUnits": {
          "format": "int32",
          "description": "How much is the other service charge",
          "type": "integer"
        },
        "payments": {
          "description": "Applied payments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOrderPayment"
          }
        },
        "subtotalMinorUnits": {
          "format": "int32",
          "description": "Subtotal of all items",
          "type": "integer"
        },
        "tipPaidMinorUnits": {
          "format": "int32",
          "type": "integer"
        },
        "paymentMinorUnits": {
          "format": "int32",
          "description": "How much",
          "type": "integer"
        },
        "taxMinorUnits": {
          "format": "int32",
          "description": "How much is tax",
          "type": "integer"
        }
      },
      "required": [
        "amountDueMinorUnits",
        "autoServiceChargeMinorUnits",
        "discounts",
        "otherServiceChargeMinorUnits",
        "paymentMinorUnits",
        "payments",
        "subtotalMinorUnits",
        "taxMinorUnits",
        "tipPaidMinorUnits"
      ]
    },
    "ApiMachineDetailsResponse": {
      "properties": {
        "hasExpressCheckoutPermission": {
          "format": "",
          "type": "boolean"
        },
        "merchantId": {
          "format": "int32",
          "type": "integer"
        },
        "currency": {
          "format": "",
          "type": "string"
        },
        "model": {
          "format": "",
          "type": "string"
        },
        "merchantCountry": {
          "format": "",
          "type": "string"
        }
      }
    },
    "ApiOauthAccessTokenCreateCommand": {
      "properties": {
        "emailAddress": {
          "format": "",
          "description": "Email address of the user. This is required if the user is an existing MasterPass user but was not registered via the /user endpoint",
          "type": "string"
        },
        "password": {
          "format": "",
          "description": "The user's password",
          "type": "string"
        }
      },
      "required": [
        "password"
      ]
    },
    "PosOptionSet": {
      "properties": {
        "min": {
          "type": "integer"
        },
        "max": {
          "type": "integer"
        },
        "name": {
          "format": "",
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosOption"
          }
        },
        "id": {
          "format": "",
          "type": "string"
        },
        "label": {
          "format": "",
          "type": "string"
        },
        "optionSetIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "label",
        "max",
        "min",
        "name",
        "optionSetIndex",
        "options"
      ]
    },
    "ApiBeneficiaryDeleteCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the beneficiary to delete",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "CreatePatOrderResponse": {
      "properties": {
        "shortReference": {
          "format": "",
          "description": "Short reference number which can be displayed to the user. In the scenario where table numbers are not fixed the waiter can use this number to manage the order",
          "type": "string"
        },
        "orderId": {
          "format": "",
          "description": "This is the orderId. Use the orderId for subsequent API requests for this Order",
          "type": "string"
        },
        "message": {
          "format": "",
          "description": "Existing Order if an order already exists for this table Identifier. Newly created order if a new order was created for this table Identifier",
          "type": "string"
        }
      }
    },
    "PosCalculateTotals": {
      "properties": {
        "listPriceMinorUnits": {
          "format": "int32",
          "description": "Total price without tax, discounts, offers, etc.",
          "type": "integer"
        },
        "netPriceMinorUnits": {
          "format": "int32",
          "description": "Total effective price that customer will be charged, in minor units",
          "type": "integer"
        },
        "discountMinorUnits": {
          "format": "int32",
          "description": "Total discount in minor units",
          "type": "integer"
        },
        "surchargeMinorUnits": {
          "format": "int32",
          "description": "Total surcharge in minor units",
          "type": "integer"
        },
        "taxMinorUnits": {
          "format": "int32",
          "description": "Total tax applied on the original price, in minor units",
          "type": "integer"
        }
      },
      "required": [
        "discountMinorUnits",
        "listPriceMinorUnits",
        "netPriceMinorUnits",
        "surchargeMinorUnits",
        "taxMinorUnits"
      ]
    },
    "GetOrderCalendarResponse": {
      "properties": {
        "merchantId": {
          "format": "",
          "description": "ID of the merchant",
          "type": "string"
        },
        "merchantTimezone": {
          "format": "",
          "description": "Timezone of the merchant",
          "type": "string"
        },
        "orderCalendarDays": {
          "description": "List of order calendar days",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderCalendarDayResponse"
          }
        },
        "merchantCurrency": {
          "format": "",
          "description": "Currency of the merchant",
          "type": "string"
        },
        "merchantLocId": {
          "format": "",
          "description": "ID of the department",
          "type": "string"
        }
      }
    },
    "UpdateCardResponse": {
      "properties": {
        "isDefault": {
          "format": "",
          "type": "boolean"
        },
        "cardId": {
          "format": "",
          "type": "string"
        }
      }
    },
    "UpdateUserImageCommand": {
      "properties": {
        "image": {
          "format": "",
          "description": "User image (base64 encoded, max length 8K)",
          "type": "string"
        },
        "format": {
          "format": "",
          "description": "User image format (\"PNG\" or \"JPEG\")",
          "type": "string",
          "enum": [
            "PNG",
            "JPEG"
          ]
        },
        "email": {
          "minLength": 1,
          "format": "",
          "description": "User email address",
          "type": "string",
          "maxLength": 200
        }
      },
      "required": [
        "email",
        "format",
        "image"
      ]
    },
    "CartResponse": {
      "properties": {
        "cartTotalTax": {
          "format": "int32",
          "description": "Total tax amount due for this cart",
          "type": "integer"
        },
        "merchantIconUrl": {
          "format": "",
          "description": "URL of the merchant icon",
          "type": "string"
        },
        "scanId": {
          "format": "",
          "description": "ID of the scannable associated with this cart",
          "type": "string"
        },
        "cartId": {
          "format": "",
          "description": "ID of the cart",
          "type": "string"
        },
        "amountMinorUnits": {
          "format": "int32",
          "description": "Total cart cost including tax, less any discounts",
          "type": "integer"
        },
        "timeZone": {
          "format": "",
          "description": "Time zone",
          "type": "string"
        },
        "basicCost": {
          "format": "int32",
          "description": "The unit cost multiplied by the quantity.  The unit cost may or may not include tax depending on the unitPricePreTax value.  Coupons are not deducted from the basicCost",
          "type": "integer"
        },
        "merchantLocId": {
          "format": "",
          "description": "ID of the outlet",
          "type": "string"
        },
        "seatRequired": {
          "format": "",
          "description": "Determines if a seat is required for this cart",
          "type": "boolean"
        },
        "taxName": {
          "format": "",
          "description": "Name of the tax paid on the cart",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the Merchant that sells the products in this cart",
          "type": "string"
        },
        "merchantLocation": {
          "format": "",
          "description": "Description of the outlet",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "ID of the Merchant that sells the products in this cart",
          "type": "string"
        },
        "locatedScanId": {
          "format": "",
          "description": "ID of a scannable item",
          "type": "string"
        },
        "taxCalculationsEnabled": {
          "format": "",
          "description": "Determines if tax calculations are enabled for the merchant",
          "type": "boolean"
        },
        "cartType": {
          "format": "",
          "description": "The type of this cart.  This value is ACTIVE",
          "type": "string"
        },
        "currency": {
          "format": "",
          "description": "Currency code (ISO-4217) associated with the outlet",
          "type": "string"
        },
        "cartItems": {
          "description": "The items in this cart",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItemResponse"
          }
        },
        "merchantWideImageUrl": {
          "format": "",
          "description": "URL to the Merchant image",
          "type": "string"
        },
        "shippingAddressRequired": {
          "format": "",
          "description": "Determines if a shipping address is required for this cart",
          "type": "boolean"
        },
        "unitPricePreTax": {
          "format": "",
          "description": "Determines if the unit price of this cart is pre tax",
          "type": "boolean"
        }
      }
    },
    "GetMerchantsResponse": {
      "properties": {
        "list": {
          "description": "List of merchants",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MerchantResponse"
          }
        }
      }
    },
    "GetTransactionsResponse": {
      "properties": {
        "hasMore": {
          "format": "",
          "description": "Determines if there are more transaction summaries on the server",
          "type": "boolean"
        },
        "list": {
          "description": "List of transaction summaries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionSummaryResponse"
          }
        }
      }
    },
    "ApiOrderAheadCreateCommand": {
      "properties": {
        "orderType": {
          "format": "",
          "description": "Order type to place. Valid types are 'COLLECTION' and 'DELIVERY'",
          "type": "string"
        },
        "cardPan": {
          "format": "",
          "description": "Card PAN to be used for payment. (mutually exclusive with cardId)",
          "type": "string"
        },
        "siteName": {
          "format": "",
          "description": "Name of the site to place order on",
          "type": "string"
        },
        "shippingAddressId": {
          "format": "",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "Name of the merchant who owns the site",
          "type": "string"
        },
        "products": {
          "description": "List of product items to add to the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosProductCommand"
          }
        },
        "cvc": {
          "format": "",
          "description": "CVC security code of the card. This is the code on the back of the card. Example: 123. (mutually exclusive with cardId)",
          "type": "string"
        },
        "expMonth": {
          "format": "int32",
          "description": "Expiration month of the card. Format is MM. Example: January = 01. (mutually exclusive with cardId)",
          "maximum": 12,
          "type": "integer",
          "minimum": 1
        },
        "customerPhone": {
          "format": "",
          "description": "Phone number of customer placing the order",
          "type": "string"
        },
        "orderTime": {
          "format": "int64",
          "description": "Time of order in UTC milliseconds",
          "type": "integer"
        },
        "expYear": {
          "format": "int32",
          "description": "Expiration year of the card. Format is YY. Example: 2013 = 13. (mutually exclusive with cardId)",
          "maximum": 99,
          "type": "integer",
          "minimum": 0
        },
        "amountInMinorUnits": {
          "format": "int32",
          "description": "Total amount to be paid for the order, in minor units",
          "type": "integer"
        },
        "cardId": {
          "format": "",
          "description": "ID of the card used for the payment. (mutually exclusive with [cardPan, expMonth, expYear, cvc])",
          "type": "string"
        },
        "orderNotes": {
          "format": "",
          "description": "Notes about the order, such as special requests",
          "type": "string"
        },
        "customerLastName": {
          "format": "",
          "description": "Last name of customer placing the order",
          "type": "string"
        }
      },
      "required": [
        "amountInMinorUnits",
        "customerLastName",
        "customerPhone",
        "merchantName",
        "orderTime",
        "orderType",
        "products",
        "siteName"
      ]
    },
    "DeleteCartItemCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the CartItem to delete",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "CountryResponse": {
      "properties": {
        "masterPass": {
          "format": "",
          "description": "true or false",
          "type": "string"
        },
        "phoneNumberPrefix": {
          "format": "",
          "description": "Phone number prefix",
          "type": "string"
        },
        "code": {
          "format": "",
          "description": "Country's code",
          "type": "string"
        },
        "privacy": {
          "format": "",
          "description": "Privacy terms",
          "type": "string"
        },
        "marketingOptInText": {
          "format": "",
          "description": "Marketing text phrase",
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocaleResponse"
          }
        },
        "phoneNumberMinLength": {
          "format": "",
          "description": "Min phone number length",
          "type": "string"
        },
        "validateMobile": {
          "format": "",
          "type": "string"
        },
        "masterPassConsentResponse": {
          "$ref": "#/definitions/MasterPassConsentResponse"
        },
        "consumerLegal": {
          "format": "",
          "description": "terms and conditions, html  string  format",
          "type": "string"
        },
        "phoneCountryCode": {
          "format": "",
          "description": "Phone's code",
          "type": "string"
        },
        "terms": {
          "format": "",
          "description": "terms and condition's link",
          "type": "string"
        },
        "name": {
          "format": "",
          "description": "Country's name",
          "type": "string"
        },
        "nationalIdLegalText": {
          "format": "",
          "description": "Country's national id label text",
          "type": "string"
        },
        "phoneNumberMaxLength": {
          "format": "",
          "description": "Max phone number length",
          "type": "string"
        },
        "nationalIdLabel": {
          "format": "",
          "description": "Country's national id label",
          "type": "string"
        }
      }
    },
    "GetBeneficiariesResponse": {
      "properties": {
        "beneficiaries": {
          "description": "List of beneficiaries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryResponse"
          }
        }
      }
    },
    "ApiPosOrderMenuItemCommand": {
      "properties": {
        "isDiscounted": {
          "format": "",
          "description": "Determines if the menu item is discounted",
          "type": "boolean"
        },
        "groupName": {
          "format": "",
          "description": "Group Name of the item. In Bar Tab situations it can be as simple as Round 1, Round 2. In Pay at Table situations it can be Starters, Mains, Desserts.",
          "type": "string"
        },
        "isRefunded": {
          "format": "",
          "description": "Determines if the menu item was refunded",
          "type": "boolean"
        },
        "subItems": {
          "description": "Menu items contained within this menu item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosOrderMenuItemCommand"
          }
        },
        "itemCode": {
          "format": "",
          "description": "Menu item reference code in POS",
          "type": "string"
        },
        "priceMinorUnits": {
          "format": "int32",
          "description": "Item price after any adjustments e.g. after discount",
          "type": "integer"
        },
        "isCondiment": {
          "format": "",
          "description": "Determines if the menu item is a condiment",
          "type": "boolean"
        },
        "name": {
          "format": "",
          "description": "Name of the menu item",
          "type": "string"
        },
        "description": {
          "format": "",
          "description": "Description of the menu item",
          "type": "string"
        },
        "originalPriceMinorUnits": {
          "format": "int32",
          "description": "Original item price",
          "type": "integer"
        }
      }
    },
    "ApiPatOrderUpdateCommand": {
      "properties": {
        "id": {
          "format": "",
          "description": "ID of the order to update",
          "type": "string"
        },
        "products": {
          "description": "List of product items to add to the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiPosProductCommand"
          }
        }
      },
      "required": [
        "id",
        "products"
      ]
    },
    "GetAvailableOrderSlotsResponse": {
      "properties": {
        "list": {
          "description": "List of available order slot times in UTC milliseconds",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "ExternalTransCreateCommand": {
      "properties": {
        "subTotalAmount": {
          "format": "",
          "description": "The total value of the transaction before discount(s)",
          "type": "string"
        },
        "authCode": {
          "format": "",
          "description": "The auth code retrieved when the payment was taken",
          "type": "string"
        },
        "outletId": {
          "format": "",
          "description": "The ID of the outlet where the transaction took place",
          "type": "string"
        },
        "paymentProcessorRef": {
          "format": "",
          "description": "The reference returned from the payment processor who completed the transaction",
          "type": "string"
        },
        "discountAmount": {
          "format": "",
          "description": "The total value of discount(s) received by the customer",
          "type": "string"
        },
        "paymentProcessorName": {
          "format": "",
          "description": "The name of the payment processor who completed the transaction",
          "type": "string"
        },
        "merchantName": {
          "format": "",
          "description": "The name of the merchant where the transaction took place",
          "type": "string"
        },
        "outletName": {
          "format": "",
          "description": "The name of the outlet where the transaction took place",
          "type": "string"
        },
        "totalAmount": {
          "format": "",
          "description": "The total value of the transaction",
          "type": "string"
        },
        "ref": {
          "format": "",
          "description": "Partner's internal reference of the transaction",
          "type": "string"
        },
        "transType": {
          "format": "",
          "description": "The type of transaction. One of [MASTERPASS, NONMASTERPASS]",
          "type": "string"
        },
        "merchantId": {
          "format": "",
          "description": "The ID of the merchant where the transaction took place",
          "type": "string"
        },
        "currency": {
          "format": "",
          "description": "The currency with which the transaction was paid",
          "type": "string"
        },
        "paymentDate": {
          "format": "",
          "description": "The date the payment was made",
          "type": "string"
        },
        "status": {
          "format": "",
          "description": "The status of the transaction. One of [SUCCESS, ERROR, REVERSED]",
          "type": "string"
        }
      }
    },
    "ApiVendingSessionCommand": {
      "properties": {
        "machineId": {
          "format": "",
          "type": "string"
        },
        "cardId": {
          "format": "",
          "type": "string"
        }
      },
      "required": [
        "cardId",
        "machineId"
      ]
    },
    "TransItemResponse": {
      "properties": {
        "quantity": {
          "format": "int32",
          "description": "Quantity of the transaction item",
          "type": "integer"
        },
        "transId": {
          "format": "",
          "description": "ID of the transaction",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the transaction item",
          "type": "string"
        }
      }
    },
    "ApiBeneficiaryUpdateCommand": {
      "properties": {
        "firstName": {
          "format": "",
          "description": "First name of the beneficiary",
          "type": "string"
        },
        "image": {
          "format": "",
          "description": "Image of the beneficiary, base64 encoded string",
          "type": "string"
        },
        "lastName": {
          "format": "",
          "description": "Last name of the beneficiary",
          "type": "string"
        },
        "beneficiaryCustomFieldValues": {
          "description": "Beneficiary custom field values for the beneficiary",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryCustomField"
          }
        },
        "gender": {
          "format": "",
          "description": "Gender of the beneficiary, either M, F or -",
          "type": "string"
        },
        "merchantId": {
          "format": "int64",
          "description": "ID of the merchant to which the beneficiary belongs",
          "type": "integer"
        },
        "middleName": {
          "format": "",
          "description": "Middle name of the beneficiary",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the beneficiary to update",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "gender",
        "id",
        "lastName",
        "merchantId"
      ]
    },
    "ForgotPasswordResponse": {
      "properties": {
        "verifierType": {
          "format": "",
          "type": "string"
        },
        "forgotPasswordUrl": {
          "format": "",
          "description": "URL where the user should be directed to change their password",
          "type": "string"
        },
        "supportNumber": {
          "format": "",
          "type": "string"
        },
        "channel": {
          "format": "",
          "type": "string"
        },
        "otpToken": {
          "format": "",
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "properties": {
        "lastName": {
          "format": "",
          "description": "Last name of the user",
          "type": "string"
        },
        "cards": {
          "description": "List of payment cards associated with the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardResponse"
          }
        },
        "taxNumber": {
          "format": "",
          "description": "Tax Number of the user",
          "type": "string"
        },
        "masterPassMarketingConsent": {
          "format": "",
          "description": "Indicates if the user has consented to receive marketing communications from MasterPass",
          "type": "boolean"
        },
        "automaticEmailReceipts": {
          "format": "",
          "description": "Indicates if the user will receive an email after each purchase",
          "type": "boolean"
        },
        "countryOfResidence": {
          "format": "",
          "description": "Country where the user resides",
          "type": "string"
        },
        "phoneNumberCountryCode": {
          "format": "",
          "description": "Phone number country code of the user.  Only used for MasterPass users",
          "type": "string"
        },
        "profilePhotoUrl": {
          "format": "",
          "type": "string"
        },
        "defaultCardAlias": {
          "format": "",
          "type": "string"
        },
        "firstName": {
          "format": "",
          "description": "First name of the user",
          "type": "string"
        },
        "emailAddress": {
          "format": "",
          "description": "Email address of the user",
          "type": "string"
        },
        "phoneNumber": {
          "format": "",
          "description": "Phone number of the user.  Only used for MasterPass users",
          "type": "string"
        },
        "masterPassUser": {
          "format": "",
          "description": "Indicates if the user is a MasterPass user or a Qkr user.  This is determined by the country of residence supplied during registration",
          "type": "boolean"
        },
        "marketingConsent": {
          "format": "",
          "description": "Indicates if the user has consented to receive marketing communications from Qkr",
          "type": "boolean"
        },
        "requestCvcInAddCard": {
          "format": "",
          "type": "string"
        },
        "id": {
          "format": "",
          "description": "ID of the user",
          "type": "string"
        },
        "requestZipInAddCard": {
          "format": "",
          "type": "string"
        }
      }
    },
    "CartLineItemResponse": {
      "properties": {
        "quantity": {
          "format": "int32",
          "description": "Quantity of the cart item",
          "type": "integer"
        },
        "id": {
          "format": "",
          "description": "ID of the cart item",
          "type": "string"
        }
      }
    },
    "DepartmentCreditBalanceResponse": {
      "properties": {
        "departmentName": {
          "format": "",
          "type": "string"
        },
        "balance": {
          "format": "int32",
          "type": "integer"
        },
        "departmentId": {
          "format": "",
          "type": "string"
        },
        "currency": {
          "format": "",
          "type": "string"
        }
      }
    },
    "BeneficiaryCustomFieldsResponse": {
      "properties": {
        "list": {
          "description": "List of beneficiary custom field for the beneficiary",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryCustomFieldResponse"
          }
        }
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "license": {
      "name": "BSD Simplified 3-Clause",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    },
    "x-artifactId": "qkr",
    "contact": {
      "email": "qkr_support@mastercard.com"
    },
    "description": "Open API",
    "termsOfService": "http://labs.mastercard.com",
    "title": "Qkr! API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "card"
    },
    {
      "name": "cart"
    },
    {
      "name": "cartItem"
    },
    {
      "name": "country"
    },
    {
      "name": "forgottenPassword"
    },
    {
      "name": "lightbox"
    },
    {
      "name": "merchant"
    },
    {
      "name": "order"
    },
    {
      "name": "posPaymentNotification"
    },
    {
      "name": "menu"
    },
    {
      "name": "orderSlot"
    },
    {
      "name": "orderAhead"
    },
    {
      "name": "orderTotal"
    },
    {
      "name": "orderAheadMenu"
    },
    {
      "name": "refund"
    },
    {
      "name": "externalTrans"
    },
    {
      "name": "prodGroup"
    },
    {
      "name": "resendOTP"
    },
    {
      "name": "securityQuestion"
    },
    {
      "name": "trans"
    },
    {
      "name": "updatePassword"
    },
    {
      "name": "user"
    },
    {
      "name": "userSession"
    },
    {
      "name": "posOrder"
    },
    {
      "name": "vendingSession"
    },
    {
      "name": "machine"
    },
    {
      "name": "auth"
    },
    {
      "name": "beneficiary"
    },
    {
      "name": "beneficiaryCustomField"
    },
    {
      "name": "form"
    },
    {
      "name": "formSubmission"
    },
    {
      "name": "creditNote"
    },
    {
      "name": "orderCalendar"
    },
    {
      "name": "userImage"
    },
    {
      "name": "verifyOTP"
    }
  ]
}